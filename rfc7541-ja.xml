<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='lib/rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no"?>
<?rfc editing="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<rfc ipr="trust200902" number="7541" category="std" consensus="yes">
    
    <front>
        <title abbrev="HPACK">HPACK: HTTP/2 のためのヘッダ圧縮</title>

        <author initials="R." surname="Peon" fullname="Roberto Peon">
            <organization>Google, Inc</organization>
            <address>
                <email>fenix@google.com</email>
            </address>
        </author>

        <author initials="H." surname="Ruellan" fullname="Herve Ruellan">
            <organization>Canon CRF</organization>
            <address>
                <email>herve.ruellan@crf.canon.fr</email>
            </address>
        </author>

        <date month="May" year="2015"/>
        <area>Applications</area>
        <workgroup>HTTPbis Working Group</workgroup>
        <keyword>HTTP</keyword>
        <keyword>Header</keyword>
        <abstract>
            <t>
                この仕様書は HTTP/2 で使われる HTTP ヘッダフィールドを
                効率的に表現する圧縮フォーマット HPACK を定義
                します。
            </t>
        </abstract>

    </front>

    <middle>
        <section title="はじめに">
            <t>
                HTTP/1.1 (<xref target="RFC7230"/> を参照) において、
                ヘッダフィールドは圧縮されません。 Web ページは 12 から数百の
                リクエストを含むようになってきており、これらのリクエストの中の
                余分なヘッダフィールドは不必要に帯域を消費し、レイテンシを
                大きく増加します。
            </t>

            <t>
                <xref target="SPDY">SPDY</xref> は最初、余分なヘッダフィールド
                を効率的に表現することで非常に効率的にする
                <xref target="DEFLATE">DEFLATE</xref> フォーマットを使用して
                ヘッダフィールドを圧縮することによりこの無駄に取り組みました。
                しかしながら、このアプローチは CRIME 
                (Compression Ratio Info-leak Made Easy) 攻撃で実証された通り
                セキュリティリスクがあります。 (<xref target="CRIME"/>を参照)
            </t>

            <t>
                この仕様書は余分なヘッダフィールドを消去し、既知のセキュリティ
                攻撃への脆弱性を抑制し、そして制限された環境で使用する
                制限されたメモリ要求を持つヘッダフィールドの新しい圧縮方式
                HPACK を定義します。 HPACK の潜在的なセキュリティへの懸念は
                <xref target="Security"/> に記述します。
            </t>

            <t>
                HPACK のフォーマットは意図的にシンプルで柔軟性を欠かせています。
                この二つの特徴によって実装の誤りによる相互運用性とセキュリティ
                イシューのリスクを減らします。拡張メカニズムは定義されて
                いません。フォーマットの変更は完全な代替仕様の定義によって
                のみ成り立ちます。
            </t>

            <section title="概要">
                <t>
                    この仕様で定義されるフォーマットはヘッダフィールドのリストを
                    重複可能な名前と値のペアの順序付けられたコレクションとして扱います。
                    名前と値は不透明なオクテットの並びになることを考慮し、ヘッダ
                    フィールドの順序は圧縮と展開の後で保存されます。
                </t>
                <t>
                    エンコーディングはヘッダフィールドとインデックスされた値を
                    マップするヘッダフィールドテーブルによって決まります。これらの
                    ヘッダフィールドテーブルは、新しいフィールドをエンコードもしくは
                    デコードする時に増分更新を行えます。
                </t>
                <t>
                    エンコードされた形式内で、ヘッダフィールドはリテラルもしくは
                    ヘッダフィールドテーブル内の一つのヘッダフィールドへの参照として表現
                    されます。従って、ヘッダフィールドのリストは参照とリテラル値を
                    混ぜ合わせてエンコードできます。
                </t>
                <t>
                    リテラル値は直接エンコードされるか静的なハフマン符号を
                    使います。
                </t>
                <t>
                    エンコーダはヘッダフィールドテーブルに新しいエントリとして挿入する
                    ヘッダフィールドを決定する責任があります。デコーダは
                    エンコーダによって定められたヘッダフィールドテーブルに対する修正を行い、
                    その処理内でヘッダフィールドのリストを再構築します。
                    これによりデコーダをシンプル化し、非常に様々なエンコーダと
                    相互運用可能にすることができます。
                </t>
                <t>
                    ヘッダフィールドを表現するためのこれらの異なったメカニズムの使用
                    を解説する例は <xref target="examples"/> にあります。
                </t>
            </section>

            <section title="表記" anchor="conventions">
                <t>
                    この文書のキーワード "MUST", "MUST NOT", "REQUIRED",
                    "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",
                    "MAY", そして "OPTIONAL" は <xref target="RFC2119">RFC 2119</xref>
                    に記述された通りに解釈されます。
                </t>
                <t>
                    全ての数値はネットワークバイトオーダーです。特に断りが
                    無い限り値は符号なしです。リテラルの値は必要に応じて
                    10 進数または 16 進数で与えられます。
                </t>

            </section>

            <section title="用語" anchor="encoding.concepts">
                <t>
                    この仕様は下記の用語を使用します:
                    <list style="hanging">
                        <t hangText="ヘッダフィールド:">
                            名前と値のペア。名前と値どちらも不定なオクテットの
                            連続として扱われます。
                        </t>
                        <t hangText="動的テーブル:">
                            動的テーブル (<xref target="dynamic.table"/> を参照)
                            は保存されたヘッダフィールドとインデックス
                            値を関連付けるのに使用されるテーブルです。
                            このテーブルは動的でエンコーディングやデコーディング
                            のコンテキスト特有です。
                        </t>
                        <t hangText="静的テーブル:">
                            静的テーブル(<xref target="static.table"/> を参照)
                            は頻繁に使われるヘッダフィールドとインデックス値を静的に
                            関連づけるテーブルです。このテーブルは順序付けられ、
                            リードオンリーであり、常にアクセス可能で、すべての
                            エンコーディングやデコーディングのコンテキストの間で共有される
                            可能性があります。
                        </t>
                        <t hangText="ヘッダリスト:">
                            ヘッダリストは一緒にエンコードされるヘッダ
                            フィールドの順序付けられたコレクションであり、重複した
                            ヘッダフィールドを含むことができます。
                            HTTP/2 ヘッダブロックに含まれるヘッダフィールドの
                            完全なリストがヘッダリストです。
                        </t>
                        <t hangText="ヘッダフィールド表現:">
                            ヘッダフィールドはリテラルかインデックスの
                            どちらかのエンコードされた形式で表現できます。
                            (<xref target="header.representation"/> を参照)
                        </t>
                        <t hangText="ヘッダブロック:">
                            デコード時に完全なヘッダリストを提供する
                            ヘッダフィールド表現の順序付けられたリストです。
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section anchor="header.encoding" title="圧縮処理の概要">
            <t>
                この仕様ではエンコーダの為の特定のアルゴリズムについては記述
                しません。代わりに、デコーダがどう処理することが期待され、
                この定義で許されるエンコーディングを行う為にエンコーダに許される
                ことを正確に定義します。
            </t>

            <section anchor="header.list.ordering" title="ヘッダリストの順序">
                <t>
                    HPACK はヘッダリスト内のヘッダフィールドの順序を保存します。
                    エンコーダはオリジナルのヘッダリスト内の順序に従ってヘッダ
                    ブロックのヘッダフィールド表現を順序付けなければなりません (MUST) 。
                    デコーダはヘッダブロック内の順序によってデコードされたヘッダ
                    リストのヘッダフィールドを順序付けなければなりません (MUST) 。
                </t>
            </section>

            <section anchor="encoding.context" title="エンコーディングとデコーディングのコンテキスト">
                <t>
                    ヘッダブロックを展開するため、デコーダはデコーディング
                    コンテキストとして動的テーブル (<xref target="dynamic.table"/> を参照) の
                    管理のみを必要とします。他に必要な状態はありません。
                </t>
                <t>
                    HTTP のような双方向コミュニケーションに使用される際、
                    エンコーディングとデコーディングの動的テーブルは
                    完全に独立したエンドポイントによって管理されます。
                    例えば、リクエストとレスポンスの動的テーブルは分離されます。
                </t>
            </section>

            <section anchor="indexing.tables" title="インデックステーブル">
                <t>
                    HPACK はヘッダフィールドとインデックスを関連付ける二つの
                    テーブルを使用します。静的テーブル (<xref target="static.table"/> を参照) は
                    予め定義されており、 (ほとんどは空の値を持った) よく使用されるヘッダフィールドを
                    持ちます。動的テーブル (<xref target="dynamic.table"/> を
                    参照) は動的であり、エンコーダによってエンコードされた
                    ヘッダリスト内で繰り返し使用されるヘッダフィールドを指すのに
                    使用できます。
                </t>
                <t>
                    これら二つのテーブルはインデックス値の定義のため単一のアドレス
                    空間内で結合されます。 (<xref target="index.address.space"/> を参照)
                </t>

                <section anchor="static.table" title="静的テーブル">
                    <t>
                        静的テーブルは予め定義されたヘッダフィールドの静的
                        リストで構成されます。このエントリは <xref target="static.table.definition"/> で定義
                        されます。
                    </t>
                </section>

                <section anchor="dynamic.table" title="動的テーブル">
                    <t>
                        動的テーブルは先入先出順で管理される
                        ヘッダフィールドのリストで構成されます。動的テーブルの
                        最初であり最新のエントリは最小のインデックスに、最古の
                        エントリは最大のインデックスになります。
                    </t>
                    <t>
                        動的テーブルは最初は空です。各ヘッダブロックとして追加
                        されるエントリは展開されています。
                    </t>
                    <t>
                        動的テーブルは重複するエントリ（例えば、同じ名前と
                        同じ値を持つエントリ）を持つことができます。
                        従って、重複したエントリはデコーダによってエラーとして
                        扱われてはいけません (MUST NOT) 。
                    </t>
                    <t>
                        エンコーダは動的テーブルの更新のしかたを決定するので、動的
                        テーブルに使用されるメモリ量を制御することができます。
                        デコーダのメモリ要件を制限するために、動的テーブルサイズは
                        厳密に束縛されます (<xref target="maximum.table.size"/> を
                        参照) 。
                    </t>
                    <t>
                        ヘッダフィールド表現のリストの処理中にデコーダは動的
                        テーブルを更新します。(<xref target="header.representation.processing"/> を参照)
                    </t>
                </section>

                <section anchor="index.address.space" title="インデックスアドレス空間">
                    <t>
                        静的テーブルと動的テーブルは単一のインデックスアドレス
                        空間内で結合されます。
                    </t>
                    <t>
                        1 から静的テーブルの長さの間の指定は静的テーブル内の
                        要素を参照します (<xref target="static.table"/> を
                        参照) 。
                    </t>
                    <t>
                        静的テーブルの長さより大きい指定は動的テーブル (<xref target="dynamic.table"/> を参照) 内の
                        要素を参照します。静的テーブルの長さは動的テーブルの
                        インデックスを検索するため差し引かれます。
                    </t>
                    <t>
                        両方のテーブルの長さの合計値より大きい指定はデコード
                        エラーとして扱われなければなりません (MUST) 。
                    </t>

                    <figure anchor="Index.Address.Space" title="インデックスアドレス空間">
                        <preamble>
                            静的テーブルサイズ s 、動的テーブルサイズ k として、
                            下記の図は全体の有効なインデックスアドレス空間を
                            示しています。
                        </preamble>
                    <artwork type="drawing"><![CDATA[
        <----------  Index Address Space ---------->
        <-- Static  Table -->  <-- Dynamic Table -->
        +---+-----------+---+  +---+-----------+---+
        | 1 |    ...    | s |  |s+1|    ...    |s+k|
        +---+-----------+---+  +---+-----------+---+
                               ^                   |
                               |                   V
                        Insertion Point      Dropping Point
]]></artwork>
                    </figure>
                </section>
            </section>

            <section anchor="header.representation" title="ヘッダフィールド表現">
                <t>
                    エンコードされたヘッダフィールドはインデックスもしくは
                    リテラルで表現できます。
                </t>
                <t>
                    インデックス表現はヘッダフィールドを静的テーブルもしくは
                    動的テーブルのエントリへの参照として定義します。 
                    (<xref target="indexed.header.representation"/> を参照)
                </t>
                <t>
                    リテラル表現は名前と値を指定することでヘッダフィールドを
                    定義します。ヘッダフィールド名はリテラル、もしくは静的テーブル
                    または動的テーブルのエントリへの参照として表現できます。
                    ヘッダフィールド値はリテラルで表現されます。
                </t>
                <t>
                    3 つの異なるリテラル表現は下記のように定義されます:
                    <list style="symbols">
                        <t>
                            ヘッダフィールドを新しいエントリとして動的テーブルの
                            先頭に追加するリテラル表現 (<xref target="literal.header.with.incremental.indexing"/> を参照) 。
                        </t>
                        <t>
                            動的テーブルへのヘッダフィールドの追加を行わない
                            リテラル表現 (<xref target="literal.header.without.indexing"/> を参照) 。
                        </t>
                        <t>
                            特に中継者に再エンコードされる際に、ヘッダフィールドが
                            常にリテラル表現を使用するような追加条件を伴う、
                            動的テーブルへのヘッダフィールドの追加を行わない
                            リテラル表現 (<xref target="literal.header.never.indexed"/> を参照) 。
                            この表現は圧縮によって危険にさらされないようヘッダフィールド値を
                            保護することを意図しています。
                            (詳細については <xref target="never.indexed.literals"/> を参照) 。
                        </t>
                    </list>
                </t>
                <t>
                    3 つの表現から 1 つを選択するのは、センシティブなヘッダフィールド値を保護するため、
                    セキュリティ上の理由から導くことができます
                    (<xref target="compression.based.attacks"/> を参照) 。
                </t>
                <t>
                    ヘッダフィールド名とヘッダフィールド値のリテラル表現は
                    そのままのものか静的ハフマン符号 (<xref target="string.literal.representation"/> を参照)
                    を用いたもののどちらかのオクテットの並びでエンコードできます。
                </t>
            </section>
        </section>

        <section anchor="header.block.decoding" title="ヘッダブロックのデコード処理">
            <section anchor="header.block.processing" title="ヘッダブロック処理">
                <t>
                    デコーダはオリジナルのヘッダリストを逐次的に再構成することで
                    ヘッダブロックを処理します。
                </t>
                <t>
                    ヘッダブロックはヘッダフィールド表現を連結したものです。
                    含められるヘッダフィールド表現の違いは <xref target="detailed.format"/> で
                    説明します。
                </t>
                <t>
                    いったんヘッダフィールドがデコードされ再構成されたヘッダ
                    リストに追加されたら、そのヘッダフィールドは削除することはできません。
                    ヘッダリストに追加されたヘッダフィールドはアプリケーションに
                    安全に渡されます。
                </t>
                <t>
                    アプリケーションに結果のヘッダフィールドを渡すことで、
                    デコーダは動的テーブルが必要とするのとは別の一時的なメモリ消費を
                    最低限にして実装できます。
                </t>
            </section>

            <section anchor="header.representation.processing" title="ヘッダフィールド表現の処理">
                <t>
                    ヘッダリストを得るためのヘッダブロックの処理をこの節で
                    定義します。デコード処理でうまくヘッダリストを生成する
                    ことを確実にするため、デコーダは下記の規則に従わなければ
                    なりません (MUST) 。
                </t>
                <t>
                    ヘッダブロックに含まれるすべてのヘッダフィールド表現は
                    下記に示す通り、現れた順に処理されます。様々なヘッダ
                    フィールド表現のフォーマットの詳細と、追加の処理命令は
                    <xref target="detailed.format"/> にあります。
                </t>
                <t>
                    <spanx>インデックス表現</spanx> は 下記のアクションを
                    伴います:
                    <list style="symbols">
                        <t>
                            静的テーブルもしくは動的テーブルの参照されるエントリに
                            対応するヘッダフィールドをデコード済みヘッダリストに
                            追加する。
                        </t>
                    </list>
                </t>
                <t>
                    動的テーブルに <spanx>追加されていない</spanx> 
                    <spanx>リテラル表現</spanx> は下記のアクションを伴います:
                    action:
                    <list style="symbols">
                        <t>
                            ヘッダフィールドをデコード済みヘッダリストに
                            追加する。
                        </t>
                    </list>
                </t>
                <t>
                    動的テーブルに <spanx>追加されている</spanx> 
                    <spanx>リテラル表現</spanx> は下記のアクションを伴います:
                    <list style="symbols">
                        <t>
                            ヘッダフィールドをデコード済みヘッダリストに
                            追加する。
                        </t>
                        <t>
                            ヘッダフィールドは動的テーブルの先頭に挿入されます。
                            この挿入処理は動的テーブルの以前のエントリの削除を
                            引き起こす可能性があります (<xref target="entry.addition"/> を参照) 。
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section anchor="dynamic.table.management" title="動的テーブルの管理">
            <t>
                デコーダ側のメモリ要件を制限するため、動的テーブルは
                サイズが制限されます。
            </t>

            <section anchor="calculating.table.size" title="テーブルサイズの計算">
                <t>
                    動的テーブルのサイズはそのエントリのサイズの合計値です。
                </t>
                <t>
                    エントリのサイズはその名前のオクテットの長さ (<xref target="string.literal.representation" /> で定義される
                    通り) と値のオクテットの長さに 32 を加えた合計値です。
                </t>
                <t>
                    エントリのサイズはハフマンエンコーディングの適用無しの
                    名前と値の長さで計算されます。
                </t>
                <t>
                    <list>
                        <t>
                            注意: エントリに関連付くオーバーヘッドとして追加の 32 
                            オクテットを付加します。例として、エントリの名前と値を
                            参照するための 2 つの 64 ビットポインタと、名前と値への
                            参照数を数える 2 つの 64 ビット整数を使うエントリ構造
                            は 32 オクテットのオーバーヘッドを持ちます。
                        </t>
                    </list>
                </t>
            </section>

            <section anchor="maximum.table.size" title="最大テーブルサイズ">
                <t>
                    HPACK を使用するプロトコルは、エンコーダが動的テーブルに
                    使用することが許可される最大サイズを決定します。 HTTP/2 に
                    おいて、この値は SETTINGS_HEADER_TABLE_SIZE 設定 
                    (<xref target="HTTP2"/> の 6.5.2 節を
                    参照) で決定されます。
                </t>
                <t>
                    エンコーダはこの最大値より小さな容量を使用することを選択する
                    ことが可能です (<xref target="encoding.context.update"/> を
                    参照) が、その値はプロトコルによって設定された最大値
                    以下に留めなければなりません (MUST) 。
                </t>
                <t>
                    動的テーブルの最大サイズの変更は動的テーブルサイズ更新
                    (<xref target="encoding.context.update"/> を参照) から通知されます。
                    この動的テーブルサイズ更新は動的テーブルサイズの変更の後に
                    最初のヘッダブロックの先頭が続かなければなりません (MUST) 。
                    HTTP/2 において、これは設定同期 (<xref target="HTTP2"/> の 6.5.3 節を
                    参照) で追従します。
                </t>
                <t>
                    二つのヘッダブロックの送信の間に複数のテーブルサイズの最大値の
                    更新が起こる可能性があります。この場合このサイズはこの区間内に
                    一度以上変更され、区間内に現れた最小の最大テーブルサイズが
                    動的テーブルサイズ更新内で通知されなければなりません (MUST) 。
                    最終的な最大サイズは常に通知され、多くて二つの動的テーブルサイズ更新が
                    引き起こされます。これはデコーダがデコーダテーブルサイズに基づき
                    削除を実行することを可能にするのを確実にします (<xref target="entry.eviction"/> を参照) 。
                </t>
                <t>
                    このメカニズムで 0 の最大サイズを設定することで動的テーブル
                    からエントリを完全にクリアして、その後に再格納することが
                    できます。
                </t>
            </section>

            <section anchor="entry.eviction" title="動的テーブルサイズ変更時のエントリの削除">
                <t>
                    動的テーブルの最大サイズが減少するたびに、動的テーブルの
                    サイズが最大サイズ以下になるまで動的テーブルの末尾から
                    エントリが削除されます。
                </t>
            </section>

            <section anchor="entry.addition" title="新しいエントリ追加時のエントリの削除">
                <t>
                    動的テーブルに新しいエントリが追加される前に、
                    動的テーブルのサイズが (最大サイズ - 新しいエントリサイズ) 
                    以下になるかテーブルが空になるまで動的テーブルの末尾から
                    エントリが削除されます。
                </t>
                <t>
                    もし新しいエントリのサイズが最大サイズ以下なら、エントリは
                    テーブルに追加されます。最大サイズより大きいエントリの
                    追加を試みることはエラーにはなりません; 最大サイズより
                    大きなエントリの追加を試みるとすべてのエントリを空にすることに
                    なり、テーブルを空にする結果になります。
                </t>
                <t>
                    動的テーブルに新しいエントリを追加する際、そのエントリは
                    削除される可能性のある動的テーブルのエントリの名前を参照する可能性があります。
                    新しいエントリを挿入する前に動的テーブルから参照されるエントリが
                    削除される場合、参照される名前を削除するのを避けるよう実装に注意してください。
                </t>
            </section>
        </section>

        <section anchor="low-level.representation" title="プリミティブ型表現">
            <t>
                HPACK エンコーディングは二つのプリミティブ型を使用します:
                符号なしの可変長整数と、オクテットの文字列
            </t>

            <section anchor="integer.representation" title="整数表現">
                <t>
                    整数は名前のインデックス、ヘッダフィールドのインデックスまたは
                    文字列の長さを表現するために使用されます。整数表現はオクテット内の
                    どこからでも開始できます。処理の最適化のため、整数表現は常に
                    オクテットの末尾で終わります。
                </t>
                <t>
                    整数は 2 つのパートで表現されます: 現在のオクテットを埋める
                    プレフィックスとプレフィックス内に収まらない整数値のため
                    使用されるオクテットのオプションのリスト。プレフィックス
                    のビット数 (N と呼ばれる) はこの整数表現のパラメータです。
                </t>
                <t>
                    整数値が十分小さい、すなわち 2^N-1 未満の
                    場合、 N ビットプレフィックス内にエンコードされます。
                </t>
                <figure anchor="Integer.Value.Encoded.within.the.Prefix.shown.for.N.5" title="プレフィックス内のエンコードされた整数値 (N = 5 の場合)">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| ? | ? | ? |       Value       |
+---+---+---+-------------------+
]]></artwork>
                </figure>
                <t>
                    そうでない場合、プレフィックスの全てのビットが 1
                    ならその値は 2^N-1 分減らされ、一個以上の
                    オクテットのリストを使用してエンコードされます。
                    各オクテットの最上位ビットは継続フラグとして使用されます:
                    リストの最終オクテットを除きこの値には 1 がセットされます。
                    残りのオクテットのビットは残った値をエンコードするのに
                    使用されます。
                </t>
                <figure anchor="Integer.Value.Encoded.after.the.Prefix.shown.for.N.5" title="プレフィックスの後ろのエンコードされた整数値 (N = 5 の場合)">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| ? | ? | ? | 1   1   1   1   1 |
+---+---+---+-------------------+
| 1 |    Value-(2^N-1) LSB      |
+---+---------------------------+
               ...
+---+---------------------------+
| 0 |    Value-(2^N-1) MSB      |
+---+---------------------------+
]]></artwork>
                </figure>
                <t>
                    オクテットのリストからの整数値のデコード処理はリストの
                    オクテットの逆順から開始します。その後、オクテット毎に
                    最上位ビットを除去します。オクテットの残りのビットは
                    連結され、その結果の値は整数値を得るために
                    2^N-1 分加算されます。
                </t>
                <t>
                    プレフィックスサイズ N は常に 1 から 8 ビットの間です。
                    オクテット境界から開始する整数は 8 ビットプレフィックスを
                    持ちます。
                </t>
                <figure>
                    <preamble>
                        整数 I を表現する擬似コードは下記の通り:
                    </preamble>
                    <artwork type="inline"><![CDATA[
if I < 2^N - 1, encode I on N bits
else
    encode (2^N - 1) on N bits
    I = I - (2^N - 1)
    while I >= 128
         encode (I % 128 + 128) on 8 bits
         I = I / 128
    encode I on 8 bits
]]></artwork>
                </figure>
                <figure>
                    <preamble>
                        整数 I をデコードする擬似コードは下記の通り:
                    </preamble>
                    <artwork type="inline"><![CDATA[
decode I from the next N bits
if I < 2^N - 1, return I
else
    M = 0
    repeat
        B = next octet
        I = I + (B & 127) * 2^M
        M = M + 7
    while B & 128 == 128
    return I
]]></artwork>
                </figure>
                <t>
                    整数のエンコード処理を解説する例は
                    <xref target="integer.representation.examples"/> にあります。
                </t>
                <t>
                    この整数表現は不定サイズの値が許可されます。エンコーダは
                    ゼロ値の巨大な数値を送ることも可能ですが、オクテットを浪費して
                    整数値のオーバーフローを起こす可能性があります。
                    値やオクテットの長さでの過度に巨大な整数のエンコードは
                    デコードエラーとして扱われなければなりません (MUST) 。
                    制限の差異は実装上の制限に基づいて、各々の整数の使用方法の違いに
                    合わせることができます。
                </t>
            </section>

            <section anchor="string.literal.representation" title="文字列リテラル表現">
                <t>
                    ヘッダフィールド名とヘッダフィールド値は文字列リテラルで
                    表現できます。文字列リテラルは文字列リテラルの
                    オクテットに直接、もしくはハフマン符号
                    (<xref target="HUFFMAN"/> を参照) を
                    使用することでオクテットの連続としてエンコードされます。
                </t>
                <figure anchor="String.Literal.Representation" title="文字列リテラル表現">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| H |    String Length (7+)     |
+---+---------------------------+
|  String Data (Length octets)  |
+-------------------------------+
]]></artwork>
                </figure>
                <t>
                    文字列リテラル表現は下記のフィールドを含みます:
                    <list style="hanging">
                        <t hangText="H:">
                            1 ビットフラグ H 。文字列のオクテットがハフマン
                            エンコーディングされているかどうかを示します。
                        </t>
                        <t hangText="String Length:">
                            文字列リテラルをエンコードするのに使用された
                            オクテットの数。 7 ビットプレフィックスの
                            整数としてエンコードされます。(<xref target="integer.representation"/> を参照)
                        </t>
                        <t hangText="String Data:">
                            文字列リテラルのエンコードされたデータ。
                            もし H が '0' なら、エンコードされたデータは
                            文字列リテラルの生のオクテットです。もし H が 
                            '1' なら、エンコードされたデータは文字列リテラルを
                            ハフマンエンコーディングされています。
                        </t>
                    </list>
                </t>
                <t>
                    ハフマンエンコーディングを使用する文字列リテラルは
                    <xref target="huffman.code"/> で定義されるハフマン符号で
                    エンコードされます。(リクエストの例として <xref target="request.examples.with.huffman.coding"/> を、
                    レスポンスの例として <xref target="response.examples.with.huffman.coding"/> を
                    参照) エンコードされたデータは文字列リテラルの各
                    オクテットに対応する符号のビット列です。
                </t>
                <t>
                    ハフマンエンコードされたデータは常にオクテット境界で終わる
                    わけではないので、その後に次のオクテット境界までパディングが
                    挿入されます。このパディングが文字列リテラルの一部だと誤認
                    されることを防ぐため、符号の最上位ビットに EOS
                    (end-of-string) に対応するシンボルが使用されます。
                </t>
                <t>
                    デコーディングにおいて、エンコードされたデータの最後の
                    不完全なコードはパディングだとみなされ、破棄されます。
                    7 ビットより大きいパディングはデコードエラーとして
                    扱われなければなりません (MUST) 。 EOS シンボルのコードの
                    最上位ビットに対応しないパディングはデコードエラーとして
                    扱われなければなりません (MUST) 。 EOS シンボルを含む
                    ハフマンエンコードされた文字列リテラルはデコードエラーとして
                    扱われなければなりません (MUST) 。
                </t>
            </section>
        </section>

        <section anchor="detailed.format" title="バイナリフォーマット">
            <t>
                この節では様々なヘッダフィールド表現の詳細フォーマット
                と、加えて動的テーブルサイズ更新命令について
                記述します。
            </t>

            <section anchor="indexed.header.representation" title="インデックスヘッダフィールド表現">
                <t>
                    インデックスヘッダフィールド表現は静的テーブル
                    または動的テーブルのエントリを識別します。(<xref target="indexing.tables"/> を参照)
                </t>
                <t>
                    インデックスヘッダフィールド表現は <xref target="header.representation.processing"/> で
                    記述した通り、デコードされたヘッダリストへのヘッダ
                    フィールドの追加を発生させます。
                </t>

                <figure anchor="Indexed.Header.Field" title="インデックスヘッダフィールド">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 1 |        Index (7+)         |
+---+---------------------------+
]]></artwork>
                </figure>
                <t>
                    インデックスヘッダフィールドは 1 ビットパターン '1'
                    から開始し、マッチするヘッダフィールドのインデックスが後に続きます。
                    インデックスは 7 ビットプレフィックスの整数として表現
                    されます (<xref target="integer.representation"/> を
                    参照) 。
                </t>
                <t>
                    0 のインデックス値は使用されません。もしインデックスヘッダ
                    フィールド表現でこれが見つかった場合、デコードエラーとして
                    扱われなければなりません (MUST) 。
                </t>
            </section>

            <section anchor="literal.header.representation" title="リテラルヘッダフィールド表現">
                <t>
                    リテラルヘッダフィールド表現はリテラルヘッダフィールド値を
                    含みます。ヘッダフィールド名はリテラル、もしくは静的テーブル
                    か動的テーブルに存在するテーブルエントリへの参照として
                    与えられます。 (<xref target="indexing.tables"/> を参照)
                </t>

                <t>
                    この仕様ではリテラルヘッダフィールド表現の 3 つの形式、
                    インデックスを伴う、インデックスを伴わない、インデックスしない
                    ものを定義します。
                </t>

                <section anchor="literal.header.with.incremental.indexing" title="インデックス更新を伴うリテラルヘッダフィールド">
                    <t>
                        インデックス更新を伴うリテラルヘッダフィールド表現は
                        デコードされたヘッダリストへのヘッダフィールドの追加と
                        動的テーブルへの新しいエントリの挿入を発生させます。
                    </t>
                    <figure anchor="Literal.Header.Field.with.Incremental.Indexing.Indexed.Name" title="インデックス更新を伴うリテラルヘッダフィールド - インデックスされた名前">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 1 |      Index (6+)       |
+---+---+-----------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <figure anchor="Literal.Header.Field.with.Incremental.Indexing.New.Name" title="インデックス更新を伴うリテラルヘッダフィールド - 新しい名前">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 1 |           0           |
+---+---+-----------------------+
| H |     Name Length (7+)      |
+---+---------------------------+
|  Name String (Length octets)  |
+---+---------------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <t>
                        インデックス更新を伴うリテラルヘッダフィールド表現は
                        2 ビットパターン '01' から開始します。
                    </t>
                    <t>
                        もし静的テーブルまたは動的テーブルに格納されたエントリの
                        ヘッダフィールド名に、ヘッダフィールド名とマッチする場合、
                        ヘッダフィールド名はそのエントリのインデックスを用いて
                        表現できます。この場合、エントリのインデックスは 6 ビット
                        プレフィックスの整数値として表現されます。 (<xref target="integer.representation"/> を参照)
                        この値は常に非ゼロです。
                    </t>
                    <t>
                        そうでなければ、ヘッダフィールド名が文字列リテラル (<xref target="string.literal.representation" /> を
                        参照) として表現されます。 6 ビットインデックスの
                        代わりに 0 値が使用され、ヘッダフィールド名が続きます。
                    </t>
                    <t>
                        どちらのヘッダフィールド名表現の形式も、文字列リテラル
                        (<xref target="string.literal.representation" /> を
                        参照) として表現されたヘッダフィールド値が続きます。
                    </t>
                </section>

                <section anchor="literal.header.without.indexing" title="インデックス更新を伴わないリテラルヘッダフィールド">
                    <t>
                        インデックス更新を伴わないリテラルヘッダフィールド表現は、
                        動的テーブルの変更を伴わずにデコードされたヘッダリストへの
                        ヘッダフィールドの追加を引き起こします。
                    </t>
                    <figure anchor="Literal.Header.Field.without.Indexing.Indexed.Name" title="インデックス更新を伴わないリテラルヘッダフィールド - インデックスされた名前">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 0 |  Index (4+)   |
+---+---+-----------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <figure anchor="Literal.Header.Field.without.Indexing.New.Name" title="インデックス更新を伴わないリテラルヘッダフィールド - 新しい名前">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 0 |       0       |
+---+---+-----------------------+
| H |     Name Length (7+)      |
+---+---------------------------+
|  Name String (Length octets)  |
+---+---------------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <t>
                        インデックス更新を伴わないリテラルヘッダフィールド表現は
                        4 ビットパターン '0000' から開始します。
                    </t>
                    <t>
                        もし静的テーブルまたは動的テーブルに格納されたエントリの
                        ヘッダフィールド名に、ヘッダフィールド名とマッチする場合、
                        ヘッダフィールド名はそのエントリのインデックスを用いて
                        表現できます。この場合、エントリのインデックスは 4 ビット
                        プレフィックスの整数値として表現されます。 (<xref target="integer.representation"/> を参照)
                        この値は常に非ゼロです。
                    </t>
                    <t>
                        そうでなければ、ヘッダフィールド名が文字列リテラル (<xref target="string.literal.representation" /> を
                        参照) として表現されます。 4 ビットインデックスの
                        代わりに 0 値が使用され、ヘッダフィールド名が続きます。
                    </t>
                    <t>
                        どちらのヘッダフィールド名表現の形式も、文字列リテラル
                        (<xref target="string.literal.representation" /> を
                        参照) として表現されたヘッダフィールド値が続きます。
                    </t>
                </section>

                <section anchor="literal.header.never.indexed" title="インデックスされないリテラルヘッダフィールド">
                    <t>
                        インデックスされないリテラルヘッダフィールド表現は
                        動的テーブルの変更を伴わずにデコードされたヘッダリストへの
                        ヘッダフィールドの追加を引き起こします。
                        中継者はこのヘッダフィールドのエンコードに同じ表現を
                        使用しなければなりません (MUST) 。
                    </t>
                    <figure anchor="Literal.Header.Field.never.Indexed.Indexed.Name" title="インデックスされないリテラルヘッダフィールド - インデックスされた名前">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 1 |  Index (4+)   |
+---+---+-----------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <figure anchor="Literal.Header.Field.never.Indexed.New.Name" title="インデックスされないリテラルヘッダフィールド - 新しい名前">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 1 |       0       |
+---+---+-----------------------+
| H |     Name Length (7+)      |
+---+---------------------------+
|  Name String (Length octets)  |
+---+---------------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <t>
                        インデックスされないリテラルヘッダフィールド表現は
                        4 ビットパターン '0001' から開始します。
                    </t>
                    <t>
                        ヘッダフィールドがインデックスされないリテラルヘッダ
                        フィールドとして表現される際、常にこのリテラル表現で
                        エンコードされなければなりません (MUST) 。特に、
                        ピアがインデックスされないリテラルヘッダフィールド
                        として表現されたヘッダフィールドを受け取ってそれを
                        送信する際、そのヘッダフィールドを転送するのに同じ
                        表現を使用しなければなりません (MUST) 。
                    </t>
                    <t>
                        この表現は圧縮によるリスクに晒されないよう
                        ヘッダフィールド値を保護することを意図しています
                        (詳細は <xref target="compression.based.attacks"/> を
                        参照) 。
                    </t>
                    <t>
                        この表現のエンコーディングはインデクシングを伴わない
                        リテラルヘッダフィールドと同様です (<xref target="literal.header.without.indexing"/> を
                        参照) 。
                    </t>
                </section>
            </section>

            <section anchor="encoding.context.update" title="動的テーブルサイズ更新">
                <t>
                    動的テーブルサイズ更新は動的テーブルのサイズの変更を
                    通知します。
                </t>
                <figure anchor="Maximum.Dynamic.Table.Size.Change" title="最大動的テーブルサイズの変更">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 1 |   Max size (5+)   |
+---+---------------------------+
]]></artwork>
                </figure>
                <t>
                    動的テーブルサイズ更新は 3 ビットパターン '001' から開始し、
                    5 ビットプレフィックスの整数値 (<xref target="integer.representation"/> を参照) として
                    表現される新しい最大値が続きます。
                </t>
                <t>
                    新しい最大値は HPACK を使用するプロトコルによって決められた
                    上限値以下でなければなりません (MUST) 。
                    この上限を超過した値はデコードエラーとして扱われなければ
                    なりません (MUST) 。 HTTP/2 において、この上限は 
                    デコーダが受け取りエンコーダが知らせた (<xref target="HTTP2"/> の 
                    6.5.3 節を参照) SETTINGS_HEADER_TABLE_SIZE パラメータ (<xref target="HTTP2"/> の 
                    6.5.2 節を参照) の最後の値です。
                </t>
                <t>
                    動的テーブルの最大サイズの減少はエントリの削除を引き起こす
                    可能性があります。 (<xref target="entry.eviction"/> を
                    参照) 。
                </t>
            </section>
        </section>

        <section anchor="Security" title="セキュリティへの配慮">

            <t>
                この節では HPACK の潜在的なセキュリティへの懸念部分について
                記述します。
                <list style="symbols">
                    <t>
                        共有される圧縮コンテキストに混合される秘密情報についての推測の
                        検証のための長さを元にしたオラクルとしての圧縮の使用。
                    </t>
                    <t>
                        デコーダで処理やメモリ容量を消費することで引き起こされる
                        サービス妨害。
                    </t>
                </list>
            </t>

            <section anchor="compression.based.attacks" title="動的テーブルの状態のプローブ">

                <t>
                    HPACK は HTTP のようなプロトコルの固有な冗長性を利用する
                    ことによってエンコーディングをされたヘッダフィールドの長さを
                    減らします。この究極的なゴールは HTTP リクエストや
                    レスポンスを送るために必要なデータの量を減らすことです。
                </t>
                <t>
                    ヘッダフィールドをエンコードするのに使用される圧縮
                    コンテキストは、エンコードし送信するヘッダフィールドを
                    定義でき、一度エンコードされるフィールドの長さを
                    観測できる攻撃者によって探り当てられる可能性があります。
                    攻撃者がどちらも行える際、動的テーブルの状態に関する推測を
                    検証するためにリクエストをうまく修正することが可能です。
                    もし推測した値が短い長さに圧縮されるなら、攻撃者はエンコードされた
                    長さと推測した値が正しいという推量を確認できます。
                </t>
                <t>
                    これは トランスポートレイヤセキュリティ (TLS) プロトコル (
                    <xref target="TLS12"/> を参照) を用いても起こる可能性があります。なぜなら
                    TLS がコンテンツの秘密保護を提供していても、そのコンテンツの
                    長さに関しては限られた保護のみしか提供されないためです。
                    <list>
                        <t>
                            注意: パティングスキームは推測の増加数を与えらた推測に
                            関連した長さを学習することのみ強制する可能性が
                            あるような、これらの能力を持つ攻撃者に対する限られた
                            保護のみ提供します。
                            パディングスキームは送信されたビット数を増加することに
                            よって圧縮に対しても直接作用します。
                        </t>
                    </list>
                </t>
                <t>
                    <xref target="CRIME">CRIME</xref>  のような攻撃はこれらの
                    一般的な攻撃者の能力の存在を証明しています。
                    <xref target="DEFLATE">DEFLATE</xref> の事実を悪用するこの
                    攻撃はプレフィックスマッチングに基づき冗長性を減らし
                    ます。これは同時に攻撃者に文字の推測を検証する
                    ことを許してしまい、指数関数時間の攻撃を線形時間の攻撃に
                    してしまいます。
                </t>

                <section title="HPACK と HTTP への適応性">
                    <t>
                        HPACK は全体のヘッダフィールド値ではなく個々の文字を
                        マッチさせることを推測値に強制することによる
                        <xref target="CRIME">CRIME</xref> に則った攻撃を緩和はしますが
                        完全な防御はしません。攻撃者は推測値が正しいか否かのみを学習する
                        ことができるため、ヘッダフィールド値の総当たり推測に
                        成り下がります。
                    </t>
                    <t>
                        特定のヘッダフィールド値の復元の可能性は、従って値の
                        エントロピーに依存します。結果として、高エントロピーの
                        値はうまく復元される可能性は低くなります。しかしながら
                        低エントロピーの値は弱さが残ります。
                    </t>
                    <t>
                        この性質の攻撃は一つの HTTP/2 コネクション上で行われる
                        二つの互いに信用できないエンティティ制御リクエストと
                        レスポンスの任意のタイミングで行えます。 もし共有の
                        HPACK 圧縮機が一つのエンティティに動的テーブルへの
                        エントリの追加を許可し、他者がそのエントリにアクセス
                        するなら、テーブルの状態を学習できます。
                    </t>
                    <t>
                        互いに信用できないエンティティからのリクエストと
                        レスポンスがあるのは中継者がどちらかの時です:
                        <list style="symbols">
                            <t>
                                複数のクライアントからのリクエストを一つの
                                コネクション上でオリジンサーバに送る、または
                            </t>
                            <t>
                                複数のオリジンサーバからのレスポンスを
                                共有された一つのコネクション上でクライアントに送る。
                            </t>
                        </list>
                        Web ブラウザも異なる <xref target="ORIGIN">web オリジン</xref> 
                        によって同じコネクションで作成されるリクエストが互いに信用
                        できないエンティティによって作成されることを仮定する必要が
                        あります。
                    </t>
                </section>

                <section title="緩和">
                    <t>
                        ヘッダフィールドの機密性が求められる HTTP のユーザは
                        推測不可能にするのに十分なエントロピーを持つ値を
                        使用することができます。しかしながら、これは一般的な
                        解としては実用的ではありません。なぜならすべての
                        HTTP のユーザに攻撃を緩和するためのステップを行う
                        ことを強制することになるためです。 HTTP の使われ
                        方に新たな制約を加えることになります。
                    </t>
                    <t>
                        HTTP のユーザに制約を課すのではなく、代わりに HPACK の実装は
                        動的テーブルの探り当ての可能性を制限するために圧縮のやり方を
                        制限することができます。
                    </t>
                    <t>
                        理想的な解は動的テーブルへのアクセスをヘッダフィールドを
                        構築するエンティティに基づいて分離することです。
                        テーブルに追加されるヘッダフィールド値はエンティティに
                        属し、その値を作成したエンティティのみが値を抽出
                        できます。
                    </t>
                    <t>
                        このオプションの圧縮性能を向上するため、信頼している
                        エンティティは公開状態にタグ付けします。例えば、
                        web ブラウザは Accept-Encoding ヘッダフィールドの
                        値は全リクエストで使用可能にします。
                    </t>
                    <t>
                        ヘッダフィールドの起源の良い情報を持たないエンコーダは
                        代わりに、更なる推測を効率的に防ぐため、将来の
                        のメッセージでヘッダフィールド値を推測するための大量の攻撃
                        がヘッダフィールドと動的テーブルのエントリと
                        比較されないようにするような、多くの異なる値をもつ
                        ヘッダフィールドに対する処置を行っても構いません。
                        <list>
                            <t>
                                注意: もし攻撃者が値の再入を行える信頼できる経路を
                                持つ場合、動的テーブルからのヘッダフィールドに
                                対応するエントリを単純に削除するのでは
                                不十分である可能性があります。例えば、
                                web ブラウザにおいて画像を読み込むための
                                リクエストは典型的に Cookie ヘッダフィールド
                                (この種類の攻撃で価値あるターゲットである可能性が
                                高い) を含み、 web サイトは簡単に画像が
                                読み込まれることを強制できるので、それによって
                                動的テーブルのエントリはリフレッシュされます。
                            </t>
                        </list>
                    </t>
                    <t>
                        このレスポンスはヘッダフィールドの長さと比較して
                        復元される場合があります。ヘッダフィールドを動的
                        テーブルを使わないようマークすることで短い値をより素早く、
                        長い値より高い確率にすることができます。
                    </t>
                </section>

                <section anchor="never.indexed.literals" title="インデックスされないリテラル">
                    <t>
                        実装は、圧縮せず代わりにリテラルとして値をエンコードすることで
                        センシティブなヘッダフィールドを保護することを選ぶことも
                        できます。
                    </t>
                    <t>
                        ヘッダフィールドのインデックス表現の生成を止める
                        ことは圧縮がすべてのホップで行われない場合のみ
                        影響します。インデックスされないリテラル (<xref target="literal.header.never.indexed"/> を
                        参照) は中継者に特定の値が意図的にリテラルとして
                        送信されたことを通知するのに使用できます。
                    </t>
                    <t>
                        中継者はインデックスされないリテラル表現を使った値を
                        別のインデックスされる表現で再エンコードしては
                        いけません (MUST NOT) 。 HPACK が再エンコードに使われる場合、
                        インデックスされないリテラル表現を使わなければなりません (MUST) 。
                    </t>
                    <t>
                        ヘッダフィールドにインデックスされないリテラル表現を
                        使用する選択は、幾つかの要因に依存します。 HPACK は
                        全体のヘッダフィールド値の推測に対する保護を行わないため、
                        短いかエントロピーの低い値は攻撃者によってより容易に復元しやすく
                        なります。従って、エンコーダは低いエントロピーの値のインデックス
                        を行わないことを選ぶこともできます。
                    </t>
                    <t>
                        エンコーダは Cookie や Authorization ヘッダフィールドのような、
                        重要でセンシティブなヘッダフィールドの復元を考慮して
                        ヘッダフィールドの値のインデックスを行わないことを選ぶことも
                        できます。
                    </t>
                    <t>
                        対して、エンコーダは露出されるような値の場合、少しの値をもつ
                        もしくは値のないヘッダフィールドの値をインデックスすることを
                        選ぶこともできます。例えば、 User-Agent ヘッダフィールドは
                        リクエスト毎に変化することがなく、任意のサーバに送られます。
                        この場合、特に User-Agent に使われる値の確認は少ない値で
                        与えられます。
                    </t>
                    <t>
                        これらのインデックスされないリテラル表現の使用の決定基準は
                        新しい攻撃の発見により時間を経て発展する可能性があることに
                        注意してください。
                    </t>
                </section>
            </section>

            <section title="静的ハフマンエンコーディング">
                <t>
                    静的ハフマンエンコーディングに対する現在知られている攻撃は
                    ありません。静的ハフマンエンコーディングテーブルを用いる
                    ことが情報漏えいを引き起こすことを示した研究がありますが、
                    攻撃者は意味のある情報を復元するためにこの情報漏えいを
                    利用することはできないと結論付けています (<xref target="PETAL"/> を参照) 。
                </t>
            </section>

            <section title="メモリ消費">
                <t>
                    攻撃者はエンドポイントがメモリを使い尽くすことを引き起こす
                    ことを試みることができます。 HPACK はエンドポイントで
                    割り当てられたメモリ量のピークと状態を制限するよう設計
                    されています。
                </t>
                <t>
                    圧縮機によって使用されるメモリ量は、動的テーブルの
                    最大サイズの定義を通して HPACK を使用するプロトコルによって
                    制限されます。 HTTP/2 において、この値は設定パラメータ 
                    SETTINGS_HEADER_TABLE_SIZE (<xref target="HTTP2"/> を通して
                    デコーダによって制御されます。
                    この制限は動的テーブルに格納されるデータのサイズと、
                    加えてオーバーヘッドへの少しの配慮の両方を考慮しています。
                </t>
                <t>
                    デコーダは動的テーブルの最大サイズとして適切な
                    値を設定することで状態メモリの量を制限できます。
                    HTTP/2 において、 SETTINGS_HEADER_TABLE_SIZE パラメータに適切な
                    値を設定することで実現されます。
                    エンコーダはデコーダに許可された値未満の動的テーブル
                    サイズを通知することで使用する状態メモリの量を制限できます。
                    (<xref target="encoding.context.update"/> を参照)
                </t>
                <t>
                    エンコーダやデコーダで消費される一時メモリ量は
                    ヘッダフィールドを連続的に処理することで制限できます。
                    実装はヘッダフィールドの完全なリストを保持する必要は
                    ありません。しかしながら他の理由のため完全なヘッダリストを
                    保持することがアプリケーションによっては必要になるかも
                    しれないことに注意してください; HPACK がこれを強制して
                    いないにも関わらず、アプリケーションの制限はこれを必要と
                    するかもしれません。
                </t>
            </section>

            <section title="実装上の制限">
                <t>
                    HPACK の実装は整数のための巨大な値、整数や長い文字列
                    リテラルのための長いエンコーディングがセキュリティの弱点を
                    生まないことを確実にすることが必要です。
                </t>
                <t>
                    実装はエンコードされた長さ (<xref target="integer.representation"/> を参照)と
                    同様、整数として受け入れる値を制限しなければ
                    なりません。同様に、文字列リテラル(<xref target="string.literal.representation"/> を参照)
                    として受け入れる長さを制限しなければなりません。
                </t>
            </section>

        </section>

    </middle>

    <back>
        <references title="引用文献">
<!-- draft-ietf-httpbis-http2-17 Part of Cluster 243 -->
            <reference anchor="HTTP2" target='http://www.rfc-editor.org/info/rfc7540'>
                <front>
                    <title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
                    <author initials="M." surname="Belshe" fullname="Mike Belshe">
                        <organization>Twist</organization>
                    </author>
                    <author initials="R." surname="Peon" fullname="Roberto Peon">
                        <organization>Google</organization>
                    </author>
                    <author initials="M." surname="Thomson" fullname="Martin Thomson" role="editor">
                        <organization>Mozilla</organization>
                    </author>
                    <date month="May" year="2015"/>
                </front>
                <seriesInfo name="RFC" value="7540"/>
                
            </reference>

            <reference anchor="RFC7230" target="http://www.rfc-editor.org/info/rfc7230">
              <front>
                <title>
                    Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and
                    Routing
                </title>
                <author fullname="Roy T. Fielding" initials="R." role="editor" surname="Fielding">
                  <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
                  <address><email>fielding@gbiv.com</email></address>
                </author>
                <author fullname="Julian F. Reschke" initials="J. F." role="editor" surname="Reschke">
                  <organization abbrev="greenbytes">greenbytes GmbH</organization>
                  <address><email>julian.reschke@greenbytes.de</email></address>
                </author>
                <date month="June" year="2014"/>
              </front>
              <seriesInfo name="RFC" value="7230"/>
              
            </reference>

            <reference anchor="RFC2119" target="http://www.rfc-editor.org/info/rfc2119">
              <front>
                <title>
                  Key words for use in RFCs to Indicate Requirement Levels
                </title>
                <author initials="S." surname="Bradner" fullname="Scott Bradner">
                  <organization>Harvard University</organization>
                  <address><email>sob@harvard.edu</email></address>
                </author>
                <date month="March" year="1997"/>
              </front>
              <seriesInfo name="BCP" value="14"/>
              <seriesInfo name="RFC" value="2119"/>
            </reference>

        </references>

        <references title="参考文献">
            <reference anchor="SPDY">
                <front>
                    <title>SPDY Protocol</title>
                    <author initials="M." surname="Belshe" fullname="Mike Belshe">
                        <organization>Twist</organization>
                    </author>
                    <author initials="R." surname="Peon" fullname="Roberto Peon">
                        <organization>Google</organization>
                    </author>
                    <date month="February" year="2012"/>
                </front>
                <seriesInfo name="Internet-Draft" value="draft-mbelshe-httpbis-spdy-00"/>
            </reference>

            <reference anchor="TLS12" target="http://www.rfc-editor.org/info/rfc5246">
                <front>
                    <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
                    <author initials="T." surname="Dierks" fullname="Tim Dierks"/>
                    <author initials="E." surname="Rescorla" fullname="Eric Rescorla"/>
                    <date year="2008" month="August"/>
                </front>
                <seriesInfo name="RFC" value="5246"/>
            </reference>

            <reference anchor="ORIGIN" target="http://www.rfc-editor.org/info/rfc6454">
                <front>
                    <title>The Web Origin Concept</title>
                    <author initials="A." surname="Barth" fullname="Adam Barth"/>
                    <date month="December" year="2011"/>
                </front>
                <seriesInfo name="RFC" value="6454"/>
            </reference>

            <reference anchor="DEFLATE" target="http://www.rfc-editor.org/info/rfc1951">
                <front>
                    <title>DEFLATE Compressed Data Format Specification version 1.3</title>
                    <author initials="P." surname="Deutsch" fullname="L. Peter Deutsch">
                        <organization>Aladdin Enterprises</organization>
                    </author>
                    <date month="May" year="1996"/>
                </front>
                <seriesInfo name="RFC" value="1951"/>
            </reference>

            <reference anchor="CRIME" target="https://docs.google.com/a/twist.com/presentation/d/11eBmGiHbYcHR9gL5nDyZChu_-lCa2GizeuOfaLU2HOU">
                <front>
                    <title>The CRIME Attack</title>
                    <author initials="J." surname="Rizzo" fullname="Juliano Rizzo"/>
                    <author initials="T." surname="Duong" fullname="Thai Duong"/>
                    <date month="September" year="2012"/>
                </front>
            </reference>

            <reference anchor="HUFFMAN" target="http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4051119">
                <front>
                    <title>A Method for the Construction of Minimum Redundancy
                    Codes</title>
                    <author surname="Huffman" initials="D. A." fullname="David A. Huffman"/>
                    <date month="September" year="1952"/>
                </front>
                <seriesInfo name="Proceedings of the Institute of Radio Engineers" value="Volume 40, Number 9, pp. 1098-1101"/>
            </reference>

            <reference anchor="CANONICAL" target="https://dl.acm.org/citation.cfm?id=363991">
                <front>
                    <title>Generating a canonical prefix encoding</title>
                    <author surname="Schwartz" initials="E. S." fullname="Eugene. S. Schwartz"/>
                    <author surname="Kallick" initials="B." fullname="Bruce Kallick"/>
                    <date month="March" year="1964"/>
                </front>
                <seriesInfo name="Communications of the ACM" value="Volume 7 Issue 3, pp. 166-169"/>
            </reference>

            <reference anchor="PETAL" target="http://www.pdl.cmu.edu/PDL-FTP/associated/CMU-PDL-13-106.pdf">
                <front>
                    <title>PETAL: Preset Encoding Table Information
                    Leakage</title>
                    <author surname="Tan" initials="J." fullname="Jiaqi Tan"/>
                    <author surname="Nahata" initials="J." fullname="Jayvardhan Nahata"/>
                    <date month="April" year="2013"/>
                </front>
            </reference>
        </references>

        <section title="静的テーブル定義" anchor="static.table.definition">
            <t>
                静的テーブル (<xref target="static.table"/> を参照) は
                予め定義されており変更不可能なヘッダフィールドのリストで
                構成されます。
            </t>
            <t>
                静的テーブルは HTTP/2 特有の疑似ヘッダフィールド 
                (<xref target="HTTP2"/> 8.1.2.1 節を参照) の追加を伴った、
                有名な web サイトで最も頻繁に使用されたヘッダフィールドから
                作成されました。少数のヘッダフィールドの値は頻繁に使用される値として
                エントリに追加されています。その他のヘッダフィールドは、空の値で
                追加されています。
            </t>
            <t>
                <xref target="static.table.entries"/> リストは静的テーブルを構成する
                予め定義されたヘッダフィールドと各エントリのインデックスを列挙しています。
            </t>
            <texttable title="静的テーブルエントリ" anchor="static.table.entries">
                <ttcol>インデックス</ttcol>
                <ttcol>ヘッダ名</ttcol>
                <ttcol>ヘッダ値</ttcol>

                <c>1</c><c>:authority</c><c/>
                <c>2</c><c>:method</c><c>GET</c>
                <c>3</c><c>:method</c><c>POST</c>
                <c>4</c><c>:path</c><c>/</c>
                <c>5</c><c>:path</c><c>/index.html</c>
                <c>6</c><c>:scheme</c><c>http</c>
                <c>7</c><c>:scheme</c><c>https</c>
                <c>8</c><c>:status</c><c>200</c>
                <c>9</c><c>:status</c><c>204</c>
                <c>10</c><c>:status</c><c>206</c>
                <c>11</c><c>:status</c><c>304</c>
                <c>12</c><c>:status</c><c>400</c>
                <c>13</c><c>:status</c><c>404</c>
                <c>14</c><c>:status</c><c>500</c>
                <c>15</c><c>accept-charset</c><c/>
                <c>16</c><c>accept-encoding</c><c>gzip, deflate</c>
                <c>17</c><c>accept-language</c><c/>
                <c>18</c><c>accept-ranges</c><c/>
                <c>19</c><c>accept</c><c/>
                <c>20</c><c>access-control-allow-origin</c><c/>
                <c>21</c><c>age</c><c/>
                <c>22</c><c>allow</c><c/>
                <c>23</c><c>authorization</c><c/>
                <c>24</c><c>cache-control</c><c/>
                <c>25</c><c>content-disposition</c><c/>
                <c>26</c><c>content-encoding</c><c/>
                <c>27</c><c>content-language</c><c/>
                <c>28</c><c>content-length</c><c/>
                <c>29</c><c>content-location</c><c/>
                <c>30</c><c>content-range</c><c/>
                <c>31</c><c>content-type</c><c/>
                <c>32</c><c>cookie</c><c/>
                <c>33</c><c>date</c><c/>
                <c>34</c><c>etag</c><c/>
                <c>35</c><c>expect</c><c/>
                <c>36</c><c>expires</c><c/>
                <c>37</c><c>from</c><c/>
                <c>38</c><c>host</c><c/>
                <c>39</c><c>if-match</c><c/>
                <c>40</c><c>if-modified-since</c><c/>
                <c>41</c><c>if-none-match</c><c/>
                <c>42</c><c>if-range</c><c/>
                <c>43</c><c>if-unmodified-since</c><c/>
                <c>44</c><c>last-modified</c><c/>
                <c>45</c><c>link</c><c/>
                <c>46</c><c>location</c><c/>
                <c>47</c><c>max-forwards</c><c/>
                <c>48</c><c>proxy-authenticate</c><c/>
                <c>49</c><c>proxy-authorization</c><c/>
                <c>50</c><c>range</c><c/>
                <c>51</c><c>referer</c><c/>
                <c>52</c><c>refresh</c><c/>
                <c>53</c><c>retry-after</c><c/>
                <c>54</c><c>server</c><c/>
                <c>55</c><c>set-cookie</c><c/>
                <c>56</c><c>strict-transport-security</c><c/>
                <c>57</c><c>transfer-encoding</c><c/>
                <c>58</c><c>user-agent</c><c/>
                <c>59</c><c>vary</c><c/>
                <c>60</c><c>via</c><c/>
                <c>61</c><c>www-authenticate</c><c/>
            </texttable>
        </section>

        <section anchor="huffman.code" title="ハフマン符号">
            <t>
                下記のハフマン符号はハフマン符号化を伴う文字列リテラルの
                エンコーディング時に使用されます(<xref target="string.literal.representation"/> を参照)。
            </t>
            <t>
                このハフマン符号は HTTP ヘッダの多くのサンプルで得られた
                統計から生成されました。これはユニークなコード長を持つシンボルが
                無いことを確実にするよう幾つかの微調整を行ったカノニカルハフマン
                符号 (<xref target="CANONICAL"/> を参照) です。
            </t>
            <t>
                テーブルの各行はシンボルを表現するのに使用されるコードを定義します:
                <list style="hanging">
                    <t hangText="sym:">
                        表現されるシンボル。オクテットの 10 進数値です。可能で
                        あればアスキー表現でも表記しています。特別なシンボル
                        "EOS" は文字列リテラルの終わりを示すのに使用されます。
                    </t>
                    <t hangText="code as bits:">
                        2 進数で表現されたシンボルのハフマンコード。
                        最上位ビット (MSB) で調整されています。
                    </t>
                    <t hangText="code as hex:">
                        16 進数で表現されたシンボルのハフマンコード。
                        最下位ビット (LSB) で調整されています。
                    </t>
                    <t hangText="len:">
                        シンボルを表現するコードのビット数。
                    </t>
                </list>
            </t>
            <t>
                例として、シンボル 47 (アスキー文字 "/" に対応します) のコードは
                6 ビット  "0", "1", "1", "0", "0", "0" から構成されます。
                これは 6 ビットでエンコードされた値 0x18 (16 進数で) に対応します。
            </t>
            <figure>
                <artwork><![CDATA[
                                                     code
                       code as bits                 as hex   len
     sym              aligned to MSB                aligned   in
                                                    to LSB   bits
    (  0)  |11111111|11000                             1ff8  [13]
    (  1)  |11111111|11111111|1011000                7fffd8  [23]
    (  2)  |11111111|11111111|11111110|0010         fffffe2  [28]
    (  3)  |11111111|11111111|11111110|0011         fffffe3  [28]
    (  4)  |11111111|11111111|11111110|0100         fffffe4  [28]
    (  5)  |11111111|11111111|11111110|0101         fffffe5  [28]
    (  6)  |11111111|11111111|11111110|0110         fffffe6  [28]
    (  7)  |11111111|11111111|11111110|0111         fffffe7  [28]
    (  8)  |11111111|11111111|11111110|1000         fffffe8  [28]
    (  9)  |11111111|11111111|11101010               ffffea  [24]
    ( 10)  |11111111|11111111|11111111|111100      3ffffffc  [30]
    ( 11)  |11111111|11111111|11111110|1001         fffffe9  [28]
    ( 12)  |11111111|11111111|11111110|1010         fffffea  [28]
    ( 13)  |11111111|11111111|11111111|111101      3ffffffd  [30]
    ( 14)  |11111111|11111111|11111110|1011         fffffeb  [28]
    ( 15)  |11111111|11111111|11111110|1100         fffffec  [28]
    ( 16)  |11111111|11111111|11111110|1101         fffffed  [28]
    ( 17)  |11111111|11111111|11111110|1110         fffffee  [28]
    ( 18)  |11111111|11111111|11111110|1111         fffffef  [28]
    ( 19)  |11111111|11111111|11111111|0000         ffffff0  [28]
    ( 20)  |11111111|11111111|11111111|0001         ffffff1  [28]
    ( 21)  |11111111|11111111|11111111|0010         ffffff2  [28]
    ( 22)  |11111111|11111111|11111111|111110      3ffffffe  [30]
    ( 23)  |11111111|11111111|11111111|0011         ffffff3  [28]
    ( 24)  |11111111|11111111|11111111|0100         ffffff4  [28]
    ( 25)  |11111111|11111111|11111111|0101         ffffff5  [28]
    ( 26)  |11111111|11111111|11111111|0110         ffffff6  [28]
    ( 27)  |11111111|11111111|11111111|0111         ffffff7  [28]
    ( 28)  |11111111|11111111|11111111|1000         ffffff8  [28]
    ( 29)  |11111111|11111111|11111111|1001         ffffff9  [28]
    ( 30)  |11111111|11111111|11111111|1010         ffffffa  [28]
    ( 31)  |11111111|11111111|11111111|1011         ffffffb  [28]
' ' ( 32)  |010100                                       14  [ 6]
'!' ( 33)  |11111110|00                                 3f8  [10]
'"' ( 34)  |11111110|01                                 3f9  [10]
'#' ( 35)  |11111111|1010                               ffa  [12]
'$' ( 36)  |11111111|11001                             1ff9  [13]
'%' ( 37)  |010101                                       15  [ 6]
'&' ( 38)  |11111000                                     f8  [ 8]
''' ( 39)  |11111111|010                                7fa  [11]
'(' ( 40)  |11111110|10                                 3fa  [10]
')' ( 41)  |11111110|11                                 3fb  [10]
'*' ( 42)  |11111001                                     f9  [ 8]
'+' ( 43)  |11111111|011                                7fb  [11]
',' ( 44)  |11111010                                     fa  [ 8]
'-' ( 45)  |010110                                       16  [ 6]
'.' ( 46)  |010111                                       17  [ 6]
'/' ( 47)  |011000                                       18  [ 6]
'0' ( 48)  |00000                                         0  [ 5]
'1' ( 49)  |00001                                         1  [ 5]
'2' ( 50)  |00010                                         2  [ 5]
'3' ( 51)  |011001                                       19  [ 6]
'4' ( 52)  |011010                                       1a  [ 6]
'5' ( 53)  |011011                                       1b  [ 6]
'6' ( 54)  |011100                                       1c  [ 6]
'7' ( 55)  |011101                                       1d  [ 6]
'8' ( 56)  |011110                                       1e  [ 6]
'9' ( 57)  |011111                                       1f  [ 6]
':' ( 58)  |1011100                                      5c  [ 7]
';' ( 59)  |11111011                                     fb  [ 8]
'<' ( 60)  |11111111|1111100                           7ffc  [15]
'=' ( 61)  |100000                                       20  [ 6]
'>' ( 62)  |11111111|1011                               ffb  [12]
'?' ( 63)  |11111111|00                                 3fc  [10]
'@' ( 64)  |11111111|11010                             1ffa  [13]
'A' ( 65)  |100001                                       21  [ 6]
'B' ( 66)  |1011101                                      5d  [ 7]
'C' ( 67)  |1011110                                      5e  [ 7]
'D' ( 68)  |1011111                                      5f  [ 7]
'E' ( 69)  |1100000                                      60  [ 7]
'F' ( 70)  |1100001                                      61  [ 7]
'G' ( 71)  |1100010                                      62  [ 7]
'H' ( 72)  |1100011                                      63  [ 7]
'I' ( 73)  |1100100                                      64  [ 7]
'J' ( 74)  |1100101                                      65  [ 7]
'K' ( 75)  |1100110                                      66  [ 7]
'L' ( 76)  |1100111                                      67  [ 7]
'M' ( 77)  |1101000                                      68  [ 7]
'N' ( 78)  |1101001                                      69  [ 7]
'O' ( 79)  |1101010                                      6a  [ 7]
'P' ( 80)  |1101011                                      6b  [ 7]
'Q' ( 81)  |1101100                                      6c  [ 7]
'R' ( 82)  |1101101                                      6d  [ 7]
'S' ( 83)  |1101110                                      6e  [ 7]
'T' ( 84)  |1101111                                      6f  [ 7]
'U' ( 85)  |1110000                                      70  [ 7]
'V' ( 86)  |1110001                                      71  [ 7]
'W' ( 87)  |1110010                                      72  [ 7]
'X' ( 88)  |11111100                                     fc  [ 8]
'Y' ( 89)  |1110011                                      73  [ 7]
'Z' ( 90)  |11111101                                     fd  [ 8]
'[' ( 91)  |11111111|11011                             1ffb  [13]
'\' ( 92)  |11111111|11111110|000                     7fff0  [19]
']' ( 93)  |11111111|11100                             1ffc  [13]
'^' ( 94)  |11111111|111100                            3ffc  [14]
'_' ( 95)  |100010                                       22  [ 6]
'`' ( 96)  |11111111|1111101                           7ffd  [15]
'a' ( 97)  |00011                                         3  [ 5]
'b' ( 98)  |100011                                       23  [ 6]
'c' ( 99)  |00100                                         4  [ 5]
'd' (100)  |100100                                       24  [ 6]
'e' (101)  |00101                                         5  [ 5]
'f' (102)  |100101                                       25  [ 6]
'g' (103)  |100110                                       26  [ 6]
'h' (104)  |100111                                       27  [ 6]
'i' (105)  |00110                                         6  [ 5]
'j' (106)  |1110100                                      74  [ 7]
'k' (107)  |1110101                                      75  [ 7]
'l' (108)  |101000                                       28  [ 6]
'm' (109)  |101001                                       29  [ 6]
'n' (110)  |101010                                       2a  [ 6]
'o' (111)  |00111                                         7  [ 5]
'p' (112)  |101011                                       2b  [ 6]
'q' (113)  |1110110                                      76  [ 7]
'r' (114)  |101100                                       2c  [ 6]
's' (115)  |01000                                         8  [ 5]
't' (116)  |01001                                         9  [ 5]
'u' (117)  |101101                                       2d  [ 6]
'v' (118)  |1110111                                      77  [ 7]
'w' (119)  |1111000                                      78  [ 7]
'x' (120)  |1111001                                      79  [ 7]
'y' (121)  |1111010                                      7a  [ 7]
'z' (122)  |1111011                                      7b  [ 7]
'{' (123)  |11111111|1111110                           7ffe  [15]
'|' (124)  |11111111|100                                7fc  [11]
'}' (125)  |11111111|111101                            3ffd  [14]
'~' (126)  |11111111|11101                             1ffd  [13]
    (127)  |11111111|11111111|11111111|1100         ffffffc  [28]
    (128)  |11111111|11111110|0110                    fffe6  [20]
    (129)  |11111111|11111111|010010                 3fffd2  [22]
    (130)  |11111111|11111110|0111                    fffe7  [20]
    (131)  |11111111|11111110|1000                    fffe8  [20]
    (132)  |11111111|11111111|010011                 3fffd3  [22]
    (133)  |11111111|11111111|010100                 3fffd4  [22]
    (134)  |11111111|11111111|010101                 3fffd5  [22]
    (135)  |11111111|11111111|1011001                7fffd9  [23]
    (136)  |11111111|11111111|010110                 3fffd6  [22]
    (137)  |11111111|11111111|1011010                7fffda  [23]
    (138)  |11111111|11111111|1011011                7fffdb  [23]
    (139)  |11111111|11111111|1011100                7fffdc  [23]
    (140)  |11111111|11111111|1011101                7fffdd  [23]
    (141)  |11111111|11111111|1011110                7fffde  [23]
    (142)  |11111111|11111111|11101011               ffffeb  [24]
    (143)  |11111111|11111111|1011111                7fffdf  [23]
    (144)  |11111111|11111111|11101100               ffffec  [24]
    (145)  |11111111|11111111|11101101               ffffed  [24]
    (146)  |11111111|11111111|010111                 3fffd7  [22]
    (147)  |11111111|11111111|1100000                7fffe0  [23]
    (148)  |11111111|11111111|11101110               ffffee  [24]
    (149)  |11111111|11111111|1100001                7fffe1  [23]
    (150)  |11111111|11111111|1100010                7fffe2  [23]
    (151)  |11111111|11111111|1100011                7fffe3  [23]
    (152)  |11111111|11111111|1100100                7fffe4  [23]
    (153)  |11111111|11111110|11100                  1fffdc  [21]
    (154)  |11111111|11111111|011000                 3fffd8  [22]
    (155)  |11111111|11111111|1100101                7fffe5  [23]
    (156)  |11111111|11111111|011001                 3fffd9  [22]
    (157)  |11111111|11111111|1100110                7fffe6  [23]
    (158)  |11111111|11111111|1100111                7fffe7  [23]
    (159)  |11111111|11111111|11101111               ffffef  [24]
    (160)  |11111111|11111111|011010                 3fffda  [22]
    (161)  |11111111|11111110|11101                  1fffdd  [21]
    (162)  |11111111|11111110|1001                    fffe9  [20]
    (163)  |11111111|11111111|011011                 3fffdb  [22]
    (164)  |11111111|11111111|011100                 3fffdc  [22]
    (165)  |11111111|11111111|1101000                7fffe8  [23]
    (166)  |11111111|11111111|1101001                7fffe9  [23]
    (167)  |11111111|11111110|11110                  1fffde  [21]
    (168)  |11111111|11111111|1101010                7fffea  [23]
    (169)  |11111111|11111111|011101                 3fffdd  [22]
    (170)  |11111111|11111111|011110                 3fffde  [22]
    (171)  |11111111|11111111|11110000               fffff0  [24]
    (172)  |11111111|11111110|11111                  1fffdf  [21]
    (173)  |11111111|11111111|011111                 3fffdf  [22]
    (174)  |11111111|11111111|1101011                7fffeb  [23]
    (175)  |11111111|11111111|1101100                7fffec  [23]
    (176)  |11111111|11111111|00000                  1fffe0  [21]
    (177)  |11111111|11111111|00001                  1fffe1  [21]
    (178)  |11111111|11111111|100000                 3fffe0  [22]
    (179)  |11111111|11111111|00010                  1fffe2  [21]
    (180)  |11111111|11111111|1101101                7fffed  [23]
    (181)  |11111111|11111111|100001                 3fffe1  [22]
    (182)  |11111111|11111111|1101110                7fffee  [23]
    (183)  |11111111|11111111|1101111                7fffef  [23]
    (184)  |11111111|11111110|1010                    fffea  [20]
    (185)  |11111111|11111111|100010                 3fffe2  [22]
    (186)  |11111111|11111111|100011                 3fffe3  [22]
    (187)  |11111111|11111111|100100                 3fffe4  [22]
    (188)  |11111111|11111111|1110000                7ffff0  [23]
    (189)  |11111111|11111111|100101                 3fffe5  [22]
    (190)  |11111111|11111111|100110                 3fffe6  [22]
    (191)  |11111111|11111111|1110001                7ffff1  [23]
    (192)  |11111111|11111111|11111000|00           3ffffe0  [26]
    (193)  |11111111|11111111|11111000|01           3ffffe1  [26]
    (194)  |11111111|11111110|1011                    fffeb  [20]
    (195)  |11111111|11111110|001                     7fff1  [19]
    (196)  |11111111|11111111|100111                 3fffe7  [22]
    (197)  |11111111|11111111|1110010                7ffff2  [23]
    (198)  |11111111|11111111|101000                 3fffe8  [22]
    (199)  |11111111|11111111|11110110|0            1ffffec  [25]
    (200)  |11111111|11111111|11111000|10           3ffffe2  [26]
    (201)  |11111111|11111111|11111000|11           3ffffe3  [26]
    (202)  |11111111|11111111|11111001|00           3ffffe4  [26]
    (203)  |11111111|11111111|11111011|110          7ffffde  [27]
    (204)  |11111111|11111111|11111011|111          7ffffdf  [27]
    (205)  |11111111|11111111|11111001|01           3ffffe5  [26]
    (206)  |11111111|11111111|11110001               fffff1  [24]
    (207)  |11111111|11111111|11110110|1            1ffffed  [25]
    (208)  |11111111|11111110|010                     7fff2  [19]
    (209)  |11111111|11111111|00011                  1fffe3  [21]
    (210)  |11111111|11111111|11111001|10           3ffffe6  [26]
    (211)  |11111111|11111111|11111100|000          7ffffe0  [27]
    (212)  |11111111|11111111|11111100|001          7ffffe1  [27]
    (213)  |11111111|11111111|11111001|11           3ffffe7  [26]
    (214)  |11111111|11111111|11111100|010          7ffffe2  [27]
    (215)  |11111111|11111111|11110010               fffff2  [24]
    (216)  |11111111|11111111|00100                  1fffe4  [21]
    (217)  |11111111|11111111|00101                  1fffe5  [21]
    (218)  |11111111|11111111|11111010|00           3ffffe8  [26]
    (219)  |11111111|11111111|11111010|01           3ffffe9  [26]
    (220)  |11111111|11111111|11111111|1101         ffffffd  [28]
    (221)  |11111111|11111111|11111100|011          7ffffe3  [27]
    (222)  |11111111|11111111|11111100|100          7ffffe4  [27]
    (223)  |11111111|11111111|11111100|101          7ffffe5  [27]
    (224)  |11111111|11111110|1100                    fffec  [20]
    (225)  |11111111|11111111|11110011               fffff3  [24]
    (226)  |11111111|11111110|1101                    fffed  [20]
    (227)  |11111111|11111111|00110                  1fffe6  [21]
    (228)  |11111111|11111111|101001                 3fffe9  [22]
    (229)  |11111111|11111111|00111                  1fffe7  [21]
    (230)  |11111111|11111111|01000                  1fffe8  [21]
    (231)  |11111111|11111111|1110011                7ffff3  [23]
    (232)  |11111111|11111111|101010                 3fffea  [22]
    (233)  |11111111|11111111|101011                 3fffeb  [22]
    (234)  |11111111|11111111|11110111|0            1ffffee  [25]
    (235)  |11111111|11111111|11110111|1            1ffffef  [25]
    (236)  |11111111|11111111|11110100               fffff4  [24]
    (237)  |11111111|11111111|11110101               fffff5  [24]
    (238)  |11111111|11111111|11111010|10           3ffffea  [26]
    (239)  |11111111|11111111|1110100                7ffff4  [23]
    (240)  |11111111|11111111|11111010|11           3ffffeb  [26]
    (241)  |11111111|11111111|11111100|110          7ffffe6  [27]
    (242)  |11111111|11111111|11111011|00           3ffffec  [26]
    (243)  |11111111|11111111|11111011|01           3ffffed  [26]
    (244)  |11111111|11111111|11111100|111          7ffffe7  [27]
    (245)  |11111111|11111111|11111101|000          7ffffe8  [27]
    (246)  |11111111|11111111|11111101|001          7ffffe9  [27]
    (247)  |11111111|11111111|11111101|010          7ffffea  [27]
    (248)  |11111111|11111111|11111101|011          7ffffeb  [27]
    (249)  |11111111|11111111|11111111|1110         ffffffe  [28]
    (250)  |11111111|11111111|11111101|100          7ffffec  [27]
    (251)  |11111111|11111111|11111101|101          7ffffed  [27]
    (252)  |11111111|11111111|11111101|110          7ffffee  [27]
    (253)  |11111111|11111111|11111101|111          7ffffef  [27]
    (254)  |11111111|11111111|11111110|000          7fffff0  [27]
    (255)  |11111111|11111111|11111011|10           3ffffee  [26]
EOS (256)  |11111111|11111111|11111111|111111      3fffffff  [30]
]]></artwork>
            </figure>
        </section>


        <section anchor="examples" title="例">
            <t>
                付録には、リクエストとレスポンス両方の、ハフマン符号化を伴う場合と
                伴わない場合の、整数、ヘッダフィールド表現そしてヘッダ
                フィールドのリストのすべてのエンコーディングの例があります。
            </t>

            <section anchor="integer.representation.examples" title="整数表現の例">
                <t>
                    この節では (<xref target="integer.representation"/> を
                    参照) に詳細がある整数値の表現の例を記述します。
                </t>
                <section anchor="integer.representation.example1" title="例 1: 5 ビットプレフィックスを用いた 10 のエンコーディング">
                    <t>
                        値 10 は 5 ビットプレフィックスでエンコードされます。
                        <list style="symbols">
                            <t>
                                10 は 31 (2^5 - 1) より小さいので
                                5 ビットプレフィックスを用いて表現されます。
                            </t>
                        </list>
                    </t>
                    <figure>
                        <artwork><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| X | X | X | 0 | 1 | 0 | 1 | 0 |   10 stored on 5 bits
+---+---+---+---+---+---+---+---+
]]></artwork>
                    </figure>
                </section>

                <section anchor="integer.representation.example2" title="例 2: 5 ビットプレフィックスを用いた 1337 のエンコーディング">
                    <t>
                        値 I=1337 は 5 ビットプレフィックスでエンコードされます。
                        <list>
                            <t>
                                1337 は 31 (2^5 - 1) より大きい。
                            </t>
                            <t>
                                <list>
                                    <t> 5 ビットプレフィックスは 最大値(31) で
                                        満たされます。</t>
                                </list>
                            </t>
                            <t>I = 1337 - (2^5 - 1) = 1306.</t>
                            <t>
                                <list>
                                    <t>I (1306) は 128 以上で、
                                    while ループ本体が実行します:</t>
                                    <t>
                                        <list>
                                            <t>I % 128 == 26</t>
                                            <t>26 + 128 == 154</t>
                                            <t>154 は 8 ビットでエンコードされます:
                                            10011010</t>
                                            <t>I に 10 がセットされます (1306 / 128 ==
                                            10)</t>
                                            <t>I は 128 より大きくなく、
                                            while ループは終了します。</t>
                                        </list>
                                    </t>
                                    <t>
                                        10 になった I は 8 ビットでエンコードされます:
                                        00001010.
                                    </t>
                                </list>
                            </t>

                            <t>処理終了。</t>
                        </list>

                    </t>
                    <figure>
                        <artwork><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| X | X | X | 1 | 1 | 1 | 1 | 1 |  Prefix = 31, I = 1306
| 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 |  1306>=128, encode(154), I=1306/128
| 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |  10<128, encode(10), done
+---+---+---+---+---+---+---+---+
]]></artwork>
                    </figure>
                </section>

                <section anchor="integer.representation.example3" title="例 3: オクテット境界で開始する 42 のエンコーディング">
                    <t>
                        値 42 はオクテット境界から開始しエンコードされます。
                        これは 8 ビットプレフィックスが使用されることを示します。
                        <list style="symbols">
                            <t>
                                42 は 255 (2^8 - 1) 以下であり
                                8 ビットプレフィックスを用いて表現されます。
                            </t>
                        </list>
                    </t>
                    <figure>
                        <artwork><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |   42 stored on 8 bits
+---+---+---+---+---+---+---+---+
]]></artwork>
                    </figure>
                </section>
            </section>

<!-- example-start -->
<section anchor="header.field.representation.examples" title="ヘッダフィールド表現の例">
    <t>
        この節では幾つかの個々の表現の例を掲載します。
    </t>
    <section title="インデックスを伴うリテラルヘッダフィールド">
        <t>
            ヘッダフィールド表現はリテラル名とリテラル値を使用します。
            ヘッダフィールドは動的テーブルに追加されます。
        </t>
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
custom-key: custom-header]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
400a 6375 7374 6f6d 2d6b 6579 0d63 7573 | @.custom-key.cus
746f 6d2d 6865 6164 6572                | tom-header]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
40                                      | == Literal indexed ==
0a                                      |   Literal name (len = 10)
6375 7374 6f6d 2d6b 6579                | custom-key
0d                                      |   Literal value (len = 13)
6375 7374 6f6d 2d68 6561 6465 72        | custom-header
                                        | -> custom-key:
                                        |   custom-header]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  55) custom-key: custom-header
      Table size:  55]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
custom-key: custom-header]]></artwork>
            </figure>
        </t>
    </section>

    <section title="インデックスを伴わないリテラルヘッダフィールド">
        <t>
            ヘッダフィールド表現はリテラル名とリテラル値を使用します。
            ヘッダフィールドは動的テーブルに追加されません。
        </t>
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:path: /sample/path]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
040c 2f73 616d 706c 652f 7061 7468      | ../sample/path]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
04                                      | == Literal not indexed ==
                                        |   Indexed name (idx = 4)
                                        |     :path
0c                                      |   Literal value (len = 12)
2f73 616d 706c 652f 7061 7468           | /sample/path
                                        | -> :path: /sample/path]]></artwork>
            </figure>
        </t>
        <t>
          動的テーブル (デコード後): 空
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:path: /sample/path]]></artwork>
            </figure>
        </t>
    </section>

    <section title="インデックスされないリテラルヘッダフィールド">
        <t>
            ヘッダフィールド表現はリテラル名とリテラル値を使用します。
            ヘッダフィールドは動的テーブルに追加されず、中継者に
            再エンコードされる場合同じ表現を使わなければなりません。
        </t>
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
password: secret]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
1008 7061 7373 776f 7264 0673 6563 7265 | ..password.secre
74                                      | t]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
10                                      | == Literal never indexed ==
08                                      |   Literal name (len = 8)
7061 7373 776f 7264                     | password
06                                      |   Literal value (len = 6)
7365 6372 6574                          | secret
                                        | -> password: secret]]></artwork>
            </figure>
        </t>
        <t>
          動的テーブル (デコード後): 空
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
password: secret]]></artwork>
            </figure>
        </t>
    </section>

    <section title="インデックスヘッダフィールド">
        <t>
            このヘッダフィールド表現は静的テーブルにインデックスされたヘッダ
            フィールドを使用します。
        </t>
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進ダンプ:</preamble>
                <artwork><![CDATA[
82                                      | .]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET]]></artwork>
            </figure>
        </t>
        <t>
          動的テーブル (デコード後): 空
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET]]></artwork>
            </figure>
        </t>
    </section>

</section>
<section anchor="request.examples.without.huffman.coding" title="ハフマン符号化を伴わないリクエストの例">
    <t>
        この節は同じコネクションにおける HTTP リクエストに対応した
        幾つかの連続したヘッダリストを示します。
    </t>
    <section title="一個目のリクエスト">
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
8286 8441 0f77 7777 2e65 7861 6d70 6c65 | ...A.www.example
2e63 6f6d                               | .com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
86                                      | == Indexed - Add ==
                                        |   idx = 6
                                        | -> :scheme: http
84                                      | == Indexed - Add ==
                                        |   idx = 4
                                        | -> :path: /
41                                      | == Literal indexed ==
                                        |   Indexed name (idx = 1)
                                        |     :authority
0f                                      |   Literal value (len = 15)
7777 772e 6578 616d 706c 652e 636f 6d   | www.example.com
                                        | -> :authority: 
                                        |   www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  57) :authority: www.example.com
      Table size:  57]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="二個目のリクエスト">
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com
cache-control: no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
8286 84be 5808 6e6f 2d63 6163 6865      | ....X.no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
86                                      | == Indexed - Add ==
                                        |   idx = 6
                                        | -> :scheme: http
84                                      | == Indexed - Add ==
                                        |   idx = 4
                                        | -> :path: /
be                                      | == Indexed - Add ==
                                        |   idx = 62
                                        | -> :authority:
                                        |   www.example.com
58                                      | == Literal indexed ==
                                        |   Indexed name (idx = 24)
                                        |     cache-control
08                                      |   Literal value (len = 8)
6e6f 2d63 6163 6865                     | no-cache
                                        | -> cache-control: no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  53) cache-control: no-cache
[  2] (s =  57) :authority: www.example.com
      Table size: 110]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com
cache-control: no-cache]]></artwork>
            </figure>
        </t>
    </section>

    <section title="三個目のリクエスト">
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: https
:path: /index.html
:authority: www.example.com
custom-key: custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
8287 85bf 400a 6375 7374 6f6d 2d6b 6579 | ....@.custom-key
0c63 7573 746f 6d2d 7661 6c75 65        | .custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
87                                      | == Indexed - Add ==
                                        |   idx = 7
                                        | -> :scheme: https
85                                      | == Indexed - Add ==
                                        |   idx = 5
                                        | -> :path: /index.html
bf                                      | == Indexed - Add ==
                                        |   idx = 63
                                        | -> :authority:
                                        |   www.example.com
40                                      | == Literal indexed ==
0a                                      |   Literal name (len = 10)
6375 7374 6f6d 2d6b 6579                | custom-key
0c                                      |   Literal value (len = 12)
6375 7374 6f6d 2d76 616c 7565           | custom-value
                                        | -> custom-key:
                                        |   custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  54) custom-key: custom-value
[  2] (s =  53) cache-control: no-cache
[  3] (s =  57) :authority: www.example.com
      Table size: 164]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: https
:path: /index.html
:authority: www.example.com
custom-key: custom-value]]></artwork>
            </figure>
        </t>
    </section>

</section>
<section anchor="request.examples.with.huffman.coding" title="ハフマン符号化を伴うリクエストの例">
    <t>
        この節では前節と同じ例を示しますが、リテラル値にハフマン符号化を
        行います。
    </t>
    <section title="一個目のリクエスト">
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
8286 8441 8cf1 e3c2 e5f2 3a6b a0ab 90f4 | ...A......:k....
ff                                      | .]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
86                                      | == Indexed - Add ==
                                        |   idx = 6
                                        | -> :scheme: http
84                                      | == Indexed - Add ==
                                        |   idx = 4
                                        | -> :path: /
41                                      | == Literal indexed ==
                                        |   Indexed name (idx = 1)
                                        |     :authority
8c                                      |   Literal value (len = 12)
                                        |     Huffman encoded:
f1e3 c2e5 f23a 6ba0 ab90 f4ff           | .....:k.....
                                        |     Decoded:
                                        | www.example.com
                                        | -> :authority:
                                        |   www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  57) :authority: www.example.com
      Table size:  57]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="二個目のリクエスト">
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com
cache-control: no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
8286 84be 5886 a8eb 1064 9cbf           | ....X....d..]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
86                                      | == Indexed - Add ==
                                        |   idx = 6
                                        | -> :scheme: http
84                                      | == Indexed - Add ==
                                        |   idx = 4
                                        | -> :path: /
be                                      | == Indexed - Add ==
                                        |   idx = 62
                                        | -> :authority:
                                        |   www.example.com
58                                      | == Literal indexed ==
                                        |   Indexed name (idx = 24)
                                        |     cache-control
86                                      |   Literal value (len = 6)
                                        |     Huffman encoded:
a8eb 1064 9cbf                          | ...d..
                                        |     Decoded:
                                        | no-cache
                                        | -> cache-control: no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  53) cache-control: no-cache
[  2] (s =  57) :authority: www.example.com
      Table size: 110]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com
cache-control: no-cache]]></artwork>
            </figure>
        </t>
    </section>

    <section title="三個目のリクエスト">
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: https
:path: /index.html
:authority: www.example.com
custom-key: custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
8287 85bf 4088 25a8 49e9 5ba9 7d7f 8925 | ....@.%.I.[.}..%
a849 e95b b8e8 b4bf                     | .I.[....]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
87                                      | == Indexed - Add ==
                                        |   idx = 7
                                        | -> :scheme: https
85                                      | == Indexed - Add ==
                                        |   idx = 5
                                        | -> :path: /index.html
bf                                      | == Indexed - Add ==
                                        |   idx = 63
                                        | -> :authority:
                                        |   www.example.com
40                                      | == Literal indexed ==
88                                      |   Literal name (len = 8)
                                        |     Huffman encoded:
25a8 49e9 5ba9 7d7f                     | %.I.[.}.
                                        |     Decoded:
                                        | custom-key
89                                      |   Literal value (len = 9)
                                        |     Huffman encoded:
25a8 49e9 5bb8 e8b4 bf                  | %.I.[....
                                        |     Decoded:
                                        | custom-value
                                        | -> custom-key:
                                        |   custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  54) custom-key: custom-value
[  2] (s =  53) cache-control: no-cache
[  3] (s =  57) :authority: www.example.com
      Table size: 164]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: https
:path: /index.html
:authority: www.example.com
custom-key: custom-value]]></artwork>
            </figure>
        </t>
    </section>

</section>
<section anchor="response.examples.without.huffman.coding" title="ハフマン符号化を伴わないレスポンスの例">
    <t>
        この節は同じコネクションにおける HTTP レスポンスに対応した
        幾つかの連続したヘッダリストを示します。 HTTP/2 設定パラメータ
        SETTINGS_HEADER_TABLE_SIZE は幾つかの削除を起こすため、 256 
        オクテットの値で設定されています。
    </t>
    <section title="一個目のレスポンス">
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 302
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
4803 3330 3258 0770 7269 7661 7465 611d | H.302X.privatea.
4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013
2032 303a 3133 3a32 3120 474d 546e 1768 |  20:13:21 GMTn.h
7474 7073 3a2f 2f77 7777 2e65 7861 6d70 | ttps://www.examp
6c65 2e63 6f6d                          | le.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
48                                      | == Literal indexed ==
                                        |   Indexed name (idx = 8)
                                        |     :status
03                                      |   Literal value (len = 3)
3330 32                                 | 302
                                        | -> :status: 302
58                                      | == Literal indexed ==
                                        |   Indexed name (idx = 24)
                                        |     cache-control
07                                      |   Literal value (len = 7)
7072 6976 6174 65                       | private
                                        | -> cache-control: private
61                                      | == Literal indexed ==
                                        |   Indexed name (idx = 33)
                                        |     date
1d                                      |   Literal value (len = 29)
4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013
2032 303a 3133 3a32 3120 474d 54        |  20:13:21 GMT
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:21 GMT
6e                                      | == Literal indexed ==
                                        |   Indexed name (idx = 46)
                                        |     location
17                                      |   Literal value (len = 23)
6874 7470 733a 2f2f 7777 772e 6578 616d | https://www.exam
706c 652e 636f 6d                       | ple.com
                                        | -> location:
                                        |   https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  63) location: https://www.example.com
[  2] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT
[  3] (s =  52) cache-control: private
[  4] (s =  42) :status: 302
      Table size: 222]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 302
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="二個目のレスポンス">
        <t>
            (":status", "307") ヘッダフィールドの追加を行える領域を解放するため
            (":status", "302") ヘッダフィールドは動的テーブルから削除されます。
        </t>
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 307
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
4803 3330 37c1 c0bf                     | H.307...]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
48                                      | == Literal indexed ==
                                        |   Indexed name (idx = 8)
                                        |     :status
03                                      |   Literal value (len = 3)
3330 37                                 | 307
                                        | - evict: :status: 302
                                        | -> :status: 307
c1                                      | == Indexed - Add ==
                                        |   idx = 65
                                        | -> cache-control: private
c0                                      | == Indexed - Add ==
                                        |   idx = 64
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:21 GMT
bf                                      | == Indexed - Add ==
                                        |   idx = 63
                                        | -> location:
                                        |   https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  42) :status: 307
[  2] (s =  63) location: https://www.example.com
[  3] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT
[  4] (s =  52) cache-control: private
      Table size: 222]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 307
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="三個目のレスポンス">
        <t>
            このヘッダリストの処理中幾つかのヘッダフィールドが動的テーブルから
            削除されます。
        </t>
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 200
cache-control: private
date: Mon, 21 Oct 2013 20:13:22 GMT
location: https://www.example.com
content-encoding: gzip
set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
88c1 611d 4d6f 6e2c 2032 3120 4f63 7420 | ..a.Mon, 21 Oct
3230 3133 2032 303a 3133 3a32 3220 474d | 2013 20:13:22 GM
54c0 5a04 677a 6970 7738 666f 6f3d 4153 | T.Z.gzipw8foo=AS
444a 4b48 514b 425a 584f 5157 454f 5049 | DJKHQKBZXOQWEOPI
5541 5851 5745 4f49 553b 206d 6178 2d61 | UAXQWEOIU; max-a
6765 3d33 3630 303b 2076 6572 7369 6f6e | ge=3600; version
3d31                                    | =1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
88                                      | == Indexed - Add ==
                                        |   idx = 8
                                        | -> :status: 200
c1                                      | == Indexed - Add ==
                                        |   idx = 65
                                        | -> cache-control: private
61                                      | == Literal indexed ==
                                        |   Indexed name (idx = 33)
                                        |     date
1d                                      |   Literal value (len = 29)
4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013
2032 303a 3133 3a32 3220 474d 54        |  20:13:22 GMT
                                        | - evict: cache-control:
                                        |   private
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:22 GMT
c0                                      | == Indexed - Add ==
                                        |   idx = 64
                                        | -> location: 
                                        |   https://www.example.com
5a                                      | == Literal indexed ==
                                        |   Indexed name (idx = 26)
                                        |     content-encoding
04                                      |   Literal value (len = 4)
677a 6970                               | gzip
                                        | - evict: date: Mon, 21 Oct 
                                        |    2013 20:13:21 GMT
                                        | -> content-encoding: gzip
77                                      | == Literal indexed ==
                                        |   Indexed name (idx = 55)
                                        |     set-cookie
38                                      |   Literal value (len = 56)
666f 6f3d 4153 444a 4b48 514b 425a 584f | foo=ASDJKHQKBZXO
5157 454f 5049 5541 5851 5745 4f49 553b | QWEOPIUAXQWEOIU;
206d 6178 2d61 6765 3d33 3630 303b 2076 |  max-age=3600; v
6572 7369 6f6e 3d31                     | ersion=1
                                        | - evict: location:
                                        |   https://www.example.com
                                        | - evict: :status: 307
                                        | -> set-cookie: foo=ASDJKHQ
                                        |   KBZXOQWEOPIUAXQWEOIU; ma
                                        |   x-age=3600; version=1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  98) set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU;
                 max-age=3600; version=1
[  2] (s =  52) content-encoding: gzip
[  3] (s =  65) date: Mon, 21 Oct 2013 20:13:22 GMT
      Table size: 215]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 200
cache-control: private
date: Mon, 21 Oct 2013 20:13:22 GMT
location: https://www.example.com
content-encoding: gzip
set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]]></artwork>
            </figure>
        </t>
    </section>

</section>
<section anchor="response.examples.with.huffman.coding" title="ハフマン符号化を伴うレスポンスの例">
    <t>
        この節は同じコネクションにおける HTTP レスポンスに対応した
        幾つかの連続したヘッダリストを示します。 HTTP/2 設定パラメータ
        SETTINGS_HEADER_TABLE_SIZE は幾つかの削除を起こすため、 256 
        オクテットの値で設定されています。削除メカニズムはデコードされた
        リテラル値の長さを使用するため、前節と同じ削除処理が起こります。
    </t>
    <section title="一個目のレスポンス">
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 302
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
4882 6402 5885 aec3 771a 4b61 96d0 7abe | H.d.X...w.Ka..z.
9410 54d4 44a8 2005 9504 0b81 66e0 82a6 | ..T.D. .....f...
2d1b ff6e 919d 29ad 1718 63c7 8f0b 97c8 | -..n..)...c.....
e9ae 82ae 43d3                          | ....C.]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
48                                      | == Literal indexed ==
                                        |   Indexed name (idx = 8)
                                        |     :status
82                                      |   Literal value (len = 2)
                                        |     Huffman encoded:
6402                                    | d.
                                        |     Decoded:
                                        | 302
                                        | -> :status: 302
58                                      | == Literal indexed ==
                                        |   Indexed name (idx = 24)
                                        |     cache-control
85                                      |   Literal value (len = 5)
                                        |     Huffman encoded:
aec3 771a 4b                            | ..w.K
                                        |     Decoded:
                                        | private
                                        | -> cache-control: private
61                                      | == Literal indexed ==
                                        |   Indexed name (idx = 33)
                                        |     date
96                                      |   Literal value (len = 22)
                                        |     Huffman encoded:
d07a be94 1054 d444 a820 0595 040b 8166 | .z...T.D. .....f
e082 a62d 1bff                          | ...-..
                                        |     Decoded:
                                        | Mon, 21 Oct 2013 20:13:21
                                        | GMT
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:21 GMT
6e                                      | == Literal indexed ==
                                        |   Indexed name (idx = 46)
                                        |     location
91                                      |   Literal value (len = 17)
                                        |     Huffman encoded:
9d29 ad17 1863 c78f 0b97 c8e9 ae82 ae43 | .)...c.........C
d3                                      | .
                                        |     Decoded:
                                        | https://www.example.com
                                        | -> location:
                                        |   https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  63) location: https://www.example.com
[  2] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT
[  3] (s =  52) cache-control: private
[  4] (s =  42) :status: 302
      Table size: 222]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 302
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="二個目のレスポンス">
        <t>
            (":status", "307") ヘッダフィールドの追加を行える領域を解放するため
            (":status", "302") ヘッダフィールドは動的テーブルから削除されます。
        </t>
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 307
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
4883 640e ffc1 c0bf                     | H.d.....]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
48                                      | == Literal indexed ==
                                        |   Indexed name (idx = 8)
                                        |     :status
83                                      |   Literal value (len = 3)
                                        |     Huffman encoded:
640e ff                                 | d..
                                        |     Decoded:
                                        | 307
                                        | - evict: :status: 302
                                        | -> :status: 307
c1                                      | == Indexed - Add ==
                                        |   idx = 65
                                        | -> cache-control: private
c0                                      | == Indexed - Add ==
                                        |   idx = 64
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:21 GMT
bf                                      | == Indexed - Add ==
                                        |   idx = 63
                                        | -> location:
                                        |   https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  42) :status: 307
[  2] (s =  63) location: https://www.example.com
[  3] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT
[  4] (s =  52) cache-control: private
      Table size: 222]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 307
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="三個目のレスポンス">
        <t>
            このヘッダリストの処理中幾つかのヘッダフィールドが動的テーブルから
            削除されます。
        </t>
        <t>
            <figure>
                <preamble>エンコードするヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 200
cache-control: private
date: Mon, 21 Oct 2013 20:13:22 GMT
location: https://www.example.com
content-encoding: gzip
set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>エンコードされたデータの 16 進数ダンプ:</preamble>
                <artwork><![CDATA[
88c1 6196 d07a be94 1054 d444 a820 0595 | ..a..z...T.D. ..
040b 8166 e084 a62d 1bff c05a 839b d9ab | ...f...-...Z....
77ad 94e7 821d d7f2 e6c7 b335 dfdf cd5b | w..........5...[
3960 d5af 2708 7f36 72c1 ab27 0fb5 291f | 9`..'..6r..'..).
9587 3160 65c0 03ed 4ee5 b106 3d50 07   | ..1`e...N...=P.]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコード処理:</preamble>
                <artwork><![CDATA[
88                                      | == Indexed - Add ==
                                        |   idx = 8
                                        | -> :status: 200
c1                                      | == Indexed - Add ==
                                        |   idx = 65
                                        | -> cache-control: private
61                                      | == Literal indexed ==
                                        |   Indexed name (idx = 33)
                                        |     date
96                                      |   Literal value (len = 22)
                                        |     Huffman encoded:
d07a be94 1054 d444 a820 0595 040b 8166 | .z...T.D. .....f
e084 a62d 1bff                          | ...-..
                                        |     Decoded:
                                        | Mon, 21 Oct 2013 20:13:22
                                        | GMT
                                        | - evict: cache-control:
                                        |   private
                                        | -> date: Mon, 21 Oct 2013 
                                        |   20:13:22 GMT
c0                                      | == Indexed - Add ==
                                        |   idx = 64
                                        | -> location:
                                        |   https://www.example.com
5a                                      | == Literal indexed ==
                                        |   Indexed name (idx = 26)
                                        |     content-encoding
83                                      |   Literal value (len = 3)
                                        |     Huffman encoded:
9bd9 ab                                 | ...
                                        |     Decoded:
                                        | gzip
                                        | - evict: date: Mon, 21 Oct
                                        |    2013 20:13:21 GMT
                                        | -> content-encoding: gzip
77                                      | == Literal indexed ==
                                        |   Indexed name (idx = 55)
                                        |     set-cookie
ad                                      |   Literal value (len = 45)
                                        |     Huffman encoded:
94e7 821d d7f2 e6c7 b335 dfdf cd5b 3960 | .........5...[9`
d5af 2708 7f36 72c1 ab27 0fb5 291f 9587 | ..'..6r..'..)...
3160 65c0 03ed 4ee5 b106 3d50 07        | 1`e...N...=P.
                                        |     Decoded:
                                        | foo=ASDJKHQKBZXOQWEOPIUAXQ
                                        | WEOIU; max-age=3600; versi
                                        | on=1
                                        | - evict: location:
                                        |   https://www.example.com
                                        | - evict: :status: 307
                                        | -> set-cookie: foo=ASDJKHQ
                                        |   KBZXOQWEOPIUAXQWEOIU; ma
                                        |   x-age=3600; version=1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>動的テーブル (デコード後):</preamble>
                <artwork><![CDATA[
[  1] (s =  98) set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU;
                 max-age=3600; version=1
[  2] (s =  52) content-encoding: gzip
[  3] (s =  65) date: Mon, 21 Oct 2013 20:13:22 GMT
      Table size: 215]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>デコードされたヘッダリスト:</preamble>
                <artwork><![CDATA[
:status: 200
cache-control: private
date: Mon, 21 Oct 2013 20:13:22 GMT
location: https://www.example.com
content-encoding: gzip
set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]]></artwork>
            </figure>
        </t>
    </section>

</section>
<!-- example-end -->

        </section>
        <section title="謝辞">
            <t>
                この仕様は下記の個人から得た有益な情報を含んでいます:
                <list style="symbols">
                    <t>
                        Mike Bishop, Jeff Pinner, Julian Reschke, Martin Thomson
                        (価値ある編集上の貢献).
                    </t>
                    <t>
                        Johnny Graettinger (ハフマン符号統計).
                    </t>
                </list>
            </t>
        </section>

    </back>
</rfc><!--
  vim:et:tw=80:sw=4:
 -->
